#include "mw1268_app.h"
#include "mw1268_cfg.h"
#include "usart3.h"
#include "string.h"
#include "led.h"
#include "delay.h"
#include "tendermint2.h"
#include "core.h"
#include "bls_BN254.h"


#define MAX_K 20
#define MAX_SK 20
/* Field GF(2^8)  Threshold Secret Sharing*/

//u32 TIM5_Exceed_Times;
u32 TIM9_Exceed_Times;
//u32 TIM10_Exceed_Times;

////////定向传输
u32 obj_addr;//记录用户输入目标地址
u8 obj_chn;//记录用户输入目标信道
const struct uECC_Curve_t * curves[5];

u32 TIM2_Exceed_Times;
u8 Send_Data_buff[800] = {0};

char M[50];
char M_[50];

int sign_FP(FP_BN254 *x){
    int cp;
    BIG_256_28 m,pm1d2;
    FP_BN254 y;
    BIG_256_28_rcopy(pm1d2, Modulus_BN254);
    BIG_256_28_dec(pm1d2,1);
    BIG_256_28_fshr(pm1d2,1); //(p-1)/2
     
    FP_BN254_copy(&y,x);
    FP_BN254_reduce(&y);
    FP_BN254_redc(m,&y);
    cp=BIG_256_28_comp(m,pm1d2);
    return ((cp+1)&2)>>1;
}

//    int cp;
//    BIG_256_28 m,pm1d2;
//    FP_BN254 y;
//    BIG_256_28_rcopy(pm1d2, Modulus_BN254);
//    BIG_256_28_dec(pm1d2,1);
//    BIG_256_28_fshr(pm1d2,1); //(p-1)/2
//    
//    FP_BN254_copy(&y,x);
//    FP_BN254_reduce(&y);
//    FP_BN254_redc(m,&y);
//    cp=BIG_256_28_comp(m,pm1d2);
//    return ((cp+1)&2) >> 1;

void init(){
	while(LoRa_Init())//初始化LORA模块
	{
		delay_ms(300);
	}
	LoRa_CFG.chn = Data_channel;
	LoRa_CFG.tmode = LORA_TMODE_PT;
	LoRa_CFG.addr = 0;
	LoRa_CFG.power = LORA_TPW_9DBM;
	LoRa_CFG.wlrate = LORA_RATE_62K5;
	LoRa_CFG.lbt = LORA_LBT_ENABLE;
	LoRa_Set();
}

#include <stdio.h>
#include <time.h>

static char message[] = "This is a test message";

csprng R11;
int bls_BN254(csprng *RNGx)
{
	
	sprintf((char*)Send_Data_buff,"Start");
	LoRa_SendData(Send_Data_buff);
	
    int i,res;
    char s[BGS_BN254];
    char ikm[64];
#ifdef REVERSE
    char w[BFS_BN254+1], sig[4 * BFS_BN254 + 1];    // w is 2* if not compressed else 1*. sig is 4* if not compressed, else 2*
#else
    char w[4 * BFS_BN254+1], sig[BFS_BN254 + 1];    // w is 4* if not compressed else 2*. sig is 2* if not compressed, else 1*
#endif
    octet S = {0, sizeof(s), s};
    octet W = {0, sizeof(w), w};
    octet SIG = {0, sizeof(sig), sig};
    octet IKM = {0, sizeof(ikm), ikm};
    octet M = {0,sizeof(message), message};
    OCT_jstring(&M,message);

    res = BLS_BN254_INIT();
    if (res == BLS_FAIL)
    {
       //printf("Failed to initialize\n");
	
		sprintf((char*)Send_Data_buff,"Failed to initialize\n");
		LoRa_SendData(Send_Data_buff);
		
        return res;
    }

    OCT_rand(&IKM,RNGx,32);
    //IKM.len=32;
    //for (i=0;i<IKM.len;i++)
    //        IKM.val[i]=i+1;


    res = BLS_BN254_KEY_PAIR_GENERATE(&IKM, &S, &W);
    if (res == BLS_FAIL)
    {
        //printf("Failed to generate keys\n");
		sprintf((char*)Send_Data_buff,"Failed to generate keys");
		LoRa_SendData(Send_Data_buff);
        return res;
    }
	
	sprintf((char*)Send_Data_buff,"Check point 0");
	LoRa_SendData(Send_Data_buff);
	
	
    //printf("Private key= 0x");
    //OCT_output(&S);
    //printf("Public key= 0x");
    //OCT_output(&W);

    BLS_BN254_CORE_SIGN(&SIG, &M, &S);
    //printf("Signature= 0x");
    //OCT_output(&SIG);

    //message[7]='f'; // change the message

    res = BLS_BN254_CORE_VERIFY(&SIG, &M, &W);
	
	sprintf((char*)Send_Data_buff,"Check point 1");
	LoRa_SendData(Send_Data_buff);
	
    if (res == BLS_OK){
//		printf("Signature is OK\n");
		sprintf((char*)Send_Data_buff,"Signature is OK");
		LoRa_SendData(Send_Data_buff);
	} 
    else{
		sprintf((char*)Send_Data_buff,"Signature is NOT OK");
		LoRa_SendData(Send_Data_buff);
	}
    return res;
}	

int Run_idx=0;
int dealer_time[100],PK_encrypt_time[100],PK_verify_ciphertext_time[100],SK_decrypt_share_time[100],PK_verify_share_time[100],PK_combine_share_time[100];
int SK_sign_time[100],PK_verify_sig_share_time[100],PK_verify_sig_time[100],PK_sig_combine_share_time[100];
/*************************Threshold Encryption****************************************/

BIG_256_28 a[MAX_K];
BIG_256_28 SKs[MAX_SK];
u8 players;
u8 k;
ECP_BN254 G1;
ECP_BN254 G3;
ECP2_BN254 G2;
ECP_BN254 g1;
ECP2_BN254 g2;
ECP2_BN254 VK;
ECP2_BN254 VKs[MAX_SK];
u8 S[MAX_SK];
BIG_256_28 R_num;
BIG_256_28 R;
BIG_256_28 SECRET;

ECP_BN254 RES;

ECP2_BN254 g12;
FP12_BN254 pair1;
ECP_BN254 g21;
FP12_BN254 pair2;
ECP_BN254 U;
ECP_BN254 shares[MAX_SK];
char V[50];
ECP2_BN254 W,H;

/*************************Threshold Signature****************************************/

ECP_BN254 M_point;
ECP2_BN254 M_point2;
ECP_BN254 Sigs[MAX_SK];
ECP2_BN254 Sigs2[MAX_SK];
ECP_BN254 SIG;

ECP_BN254 VK1;
ECP_BN254 VKs1[MAX_SK];

void testdemo();

void ff(BIG_256_28 r,BIG_256_28 x){
	BIG_256_28 q;
	BIG_256_28_rcopy(q, CURVE_Order_BN254);
	BIG_256_28 y;
	BIG_256_28 xx;
	BIG_256_28_zero(y);
	BIG_256_28_one(xx);
	BIG_256_28 tmp;
	BIG_256_28 tmp1;
	for(u16 i=0;i<k;i++){
		
		//y+=coeff * xx
		BIG_256_28_modmul(tmp,a[i],xx, q);//tmp = a[i] * xx
		//BIG_256_28_norm(tmp);
		BIG_256_28_add(tmp1,y,tmp);//tmp1 = y + tmp
		//BIG_256_28_norm(tmp1);
		BIG_256_28_copy(y,tmp1);  //y = tmp1
		
		//xx*=x
		BIG_256_28_modmul(tmp,xx,x,q);//tmp = xx * x
		//BIG_256_28_norm(tmp);
		BIG_256_28_copy(xx,tmp);
		//BIG_256_28_norm(xx);
	}
	BIG_256_28_copy(r,y);
}

void lagrange(BIG_256_28 r,u8 j){
//	def lagrange(self, S, j):
//	# Assert S is a subset of range(0,self.l)
//	assert len(S) == self.k
//	assert type(S) is set
//	assert S.issubset(range(0,self.l))
//	S = sorted(S)

//	assert j in S
//	assert 0 <= j < self.l
//	mul = lambda a,b: a*b
//	num = reduce(mul, [0 - jj - 1 for jj in S if jj != j], ONE)
//	den = reduce(mul, [j - jj     for jj in S if jj != j], ONE)
//	return num / den
/******************************************************************/
	BIG_256_28 modl;
	BIG_256_28_rcopy(modl,CURVE_Order_BN254);
	
	//	num = reduce(mul, [0 - jj - 1 for jj in S if jj != j], ONE)
	BIG_256_28 num, ZERO, ONE, S_jj, tmp, tmp2, tmp3;
	BIG_256_28_one(num);
	BIG_256_28_zero(ZERO);
	BIG_256_28_one(ONE);
	
	BIG_256_28 tmp_neg;
	for(u8 jj=0;jj<k;jj++){
		if(S[jj] == j) continue;
		//num = num * (0 - S[jj] - 1);
		BIG_256_28_zero(S_jj);
		BIG_256_28_inc(S_jj,S[jj]);
		
		//BIG_256_28_sub(tmp,ZERO,S_jj);//tmp = 0 - S[jj]
		BIG_256_28_modneg(tmp_neg, S_jj, modl);
		BIG_256_28_modadd(tmp, ZERO, tmp_neg, modl);
		
		//BIG_256_28_sub(tmp2,tmp,ONE);//tmp2 = tmp - 1
		BIG_256_28_modneg(tmp_neg, ONE, modl);
		BIG_256_28_modadd(tmp2, tmp, tmp_neg, modl);
		
		BIG_256_28_modmul(tmp3, num, tmp2, modl);//tmp3 = num * tmp2
		BIG_256_28_copy(num,tmp3);	// num = tmp3 
	}
	BIG_256_28_norm(num);
	//	den = reduce(mul, [j - jj     for jj in S if jj != j], ONE)
	BIG_256_28 den, BIG_J;
	BIG_256_28_one(den);
	BIG_256_28_zero(BIG_J);
	BIG_256_28_inc(BIG_J,j);
	for(u8 jj=0;jj<k;jj++){
		if(S[jj] == j) continue;
		//den = den * (j - S[jj]);
		BIG_256_28_zero(S_jj);
		BIG_256_28_inc(S_jj,S[jj]);
		
		//BIG_256_28_sub(tmp,BIG_J,S_jj);//tmp = j - S[jj]
		BIG_256_28_modneg(tmp_neg, S_jj, modl);
		BIG_256_28_modadd(tmp, BIG_J, tmp_neg, modl);
		
		BIG_256_28_modmul(tmp2, den, tmp, modl);//tmp2 = den * tmp
		BIG_256_28_copy(den,tmp2);
	}
	BIG_256_28_norm(den);
	
	//return num/den
	
	BIG_256_28_moddiv(r, num, den, modl);
	
//	BIG_256_28 q;
//	BIG_256_28_rcopy(q, CURVE_Order_BN254);
//	BIG_256_28_sdiv(num , den);
//	BIG_256_28_copy(r,num);
	//BIG_256_28_moddiv(r, num , den , q);
	//BIG_256_28_norm(r);
//	BIG_256_28_inv(tmp, den,NULL);
//	BIG_256_28_mul(r, num, tmp);

}

void dealer(){
	
	TIM9_Exceed_Times = 0;
	TIM9->CNT = 0;
	
	char raw[100];
    octet RAW = {0, sizeof(raw), raw};
    csprng RNGx;                // Crypto Strong RNG
	u32 ran = RNG_Get_RandomNum();	
    RAW.len = 100;              // fake random seed source
    for (u16 i = 0; i < 100; i++) RAW.val[i] = RNG_Get_RandomNum();
    CREATE_CSPRNG(&RNGx, &RAW);  // initialise strong RNG
	
	BIG_256_28 secret, r;
	BIG_256_28_rcopy(r, CURVE_Order_BN254);
	BIG_256_28_randomnum(secret, r, &RNGx);
	
	BIG_256_28_copy(a[0],secret);
	BIG_256_28_copy(SECRET,secret);

	for(u16 i=1;i<k;i++){
		BIG_256_28_randomnum(a[i], r, &RNGx);
	}
	
	for(u16 i=0;i<players;i++){
		BIG_256_28 x;
		BIG_256_28_zero(x);
		BIG_256_28_inc(x,i+1);
		ff(SKs[i],x);
	}
	
	//test bytes
	char tmp_ch[300];
	for(int i=0;i<300;i++)tmp_ch[i] = 0x00;
	BIG_256_28_toBytes(tmp_ch,SKs[0]);
	BIG_256_28_fromBytes(SKs[0],tmp_ch);
	//end
	
	
	
	//assert ff(0) == secret
	BIG_256_28 secret1;
	BIG_256_28 ZERO;
	BIG_256_28_zero(ZERO);
	ff(secret1,ZERO);
	
	
	//VK = g2 ** secret
	ECP2_BN254_copy(&VK,&g2);
	PAIR_BN254_G2mul(&VK,secret);
	
	//VKs = [g2 ** xx for xx in SKs ]
	for(u16 i=0 ; i<players ; i++){
		ECP2_BN254_copy(&VKs[i],&g2);
		PAIR_BN254_G2mul(&VKs[i],SKs[i]);	
	}	
	
	
	/**********************************************/	
	//VK1
	//VKs1
	ECP_BN254_copy(&VK1,&g1);
	PAIR_BN254_G1mul(&VK1,secret);
	//VKs = [g2 ** xx for xx in SKs ]
	for(u16 i=0 ; i<players ; i++){
		ECP_BN254_copy(&VKs1[i],&g1);
		PAIR_BN254_G1mul(&VKs1[i],SKs[i]);	
	}
	ECP_BN254 VK1;
	ECP_BN254_copy(&VK1,&g1);
	PAIR_BN254_G1mul(&VK1,secret);
	/*********************************************/
	
	/******************output it**************************/
//	octet O;
//	char O_ch[100];for(int x=0;x<100;x++)O_ch[x]=0x00;
//	O.val = O_ch;O.max = 100;
//	sprintf((char*)Send_Data_buff,"SKs");
//	LoRa_SendData(Send_Data_buff);
//	for(int i=0;i<players;i++){
//		sprintf((char*)Send_Data_buff,"SKs[%d]",i);
//		LoRa_SendData(Send_Data_buff);
//		for(int x=0;x<100;x++)O_ch[x]=0x00;
//		BIG_256_28_toBytes(O_ch,SKs[i]);
//		for(int j=0;j<40;j++){
//			sprintf((char*)Send_Data_buff,"%02x",O_ch[j]);
//			LoRa_SendData(Send_Data_buff);
//		}
//	}
//	sprintf((char*)Send_Data_buff,"VKs");
//	LoRa_SendData(Send_Data_buff);
//	for(int i=0;i<players;i++){
//		sprintf((char*)Send_Data_buff,"VKs[%d]",i);
//		LoRa_SendData(Send_Data_buff);
//		for(int x=0;x<100;x++)O_ch[x]=0x00;
//		ECP_BN254_toOctet(&O,&VKs1[i],true);
//		for(int j=0;j<O.len;j++){
//			sprintf((char*)Send_Data_buff,"%02x",O_ch[j]);
//			LoRa_SendData(Send_Data_buff);
//		}
//	}
//	sprintf((char*)Send_Data_buff,"VK");
//	LoRa_SendData(Send_Data_buff);
//	for(int x=0;x<100;x++)O_ch[x]=0x00;
//	ECP_BN254_toOctet(&O,&VK1,true);
//	for(int j=0;j<O.len;j++){
//		sprintf((char*)Send_Data_buff,"%02x",O_ch[j]);
//		LoRa_SendData(Send_Data_buff);
//	}
//	while(1);
	/***************************************************/
	
	u32 time = TIM9->CNT + TIM9_Exceed_Times * 5000;	dealer_time[Run_idx] = time;

	/**************************Dealer end**********************************/


//	# Check reconstruction of 0
//  S = set(range(0,k))[0,1,2]
//  lhs = f(0)
	BIG_256_28 lhs,rhs,tmp,tmp1,tmp2,tmp3,tmp4;
//	FP_BN254 ZERO;
	BIG_256_28_zero(ZERO);
	BIG_256_28_zero(rhs);
	ff(lhs,ZERO);
	
//  rhs = sum(public_key.lagrange(S,j) * f(j+1) for j in S)
	for(u8 i=0;i<20;i++)S[i] = i;
	S[0] = 0;
	S[1] = 1;
	for(u16 i=0;i<k;i++){
		BIG_256_28_zero(tmp2);
		BIG_256_28_inc(tmp2,S[i]+1);
		ff(tmp,tmp2);//tmp = ff[S[i]+1]
		lagrange(tmp1,S[i]);//tmp1 = lagrange
		BIG_256_28_modmul(tmp3,tmp1,tmp,r);//tmp3 = tmp1 * tmp
		BIG_256_28_modadd(tmp4,tmp3,rhs,r);//tmp4 = tmp3 + rhs
		BIG_256_28_copy(rhs,tmp4);//rhs = tmp4
	}
	
	BIG_256_28 lhs_num,rhs_num;
	
//	FP_BN254_redc(lhs_num,lhs);
//	FP_BN254_redc(rhs_num,rhs);
	
	if(BIG_256_28_comp(lhs, rhs)==0){
		sprintf((char*)Send_Data_buff,"Reconstruction: Yes");
		LoRa_SendData(Send_Data_buff);
	}else{
		sprintf((char*)Send_Data_buff,"Reconstruction: NO");
		LoRa_SendData(Send_Data_buff);
	}
	
	
	
	////////////////////my test
	
	BIG_256_28 modl;
	BIG_256_28_rcopy(modl,CURVE_Order_BN254);
	
	BIG_256_28 b1,b2,b3,b4,b1_2;
	
	BIG_256_28_zero(b1);
	BIG_256_28_zero(b2);
	BIG_256_28_zero(b3);
	BIG_256_28_zero(b4);
	BIG_256_28_zero(b1_2);
	
	BIG_256_28_inc(b1,1);
	BIG_256_28_inc(b2,2);
	BIG_256_28_inc(b3,3);
	BIG_256_28_inc(b4,4);
	
	
	
	BIG_256_28_moddiv(b1_2,b1,b2,modl);
	
	
	BIG_256_28 res1;
	BIG_256_28_modmul(res1,b1_2,b2,modl);
	
	if(BIG_256_28_comp(res1, b1)==0){
		sprintf((char*)Send_Data_buff,"res1: Yes");
		LoRa_SendData(Send_Data_buff);
	}else{
		sprintf((char*)Send_Data_buff,"res1: NO");
		LoRa_SendData(Send_Data_buff);
	}
	
	
	BIG_256_28 b_1,b_2,b_3,b_4,b_1_2;
	BIG_256_28_modneg(b_3,b3,modl);
	BIG_256_28 res2;
	BIG_256_28_sub(res2, b_1, b_4);
	
	if(BIG_256_28_comp(res2, b_3)==0){
		sprintf((char*)Send_Data_buff,"res2: Yes");
		LoRa_SendData(Send_Data_buff);
	}else{
		sprintf((char*)Send_Data_buff,"res2: NO");
		LoRa_SendData(Send_Data_buff);
	}
	
	BIG_256_28 res3;
	BIG_256_28_modneg(b_3,b3,modl);
	BIG_256_28_modneg(b_4,b4,modl);
	BIG_256_28_modadd(res3,b1,b_4,modl);
	if(BIG_256_28_comp(res3, b_3)==0){
		sprintf((char*)Send_Data_buff,"res3: Yes");
		LoRa_SendData(Send_Data_buff);
	}else{
		sprintf((char*)Send_Data_buff,"res3: NO");
		LoRa_SendData(Send_Data_buff);
	}
}

//

//threshold signature

void SK_sign(){
	BIG_256_28 r,modl;
	BIG_256_28_rcopy(modl,CURVE_Order_BN254);
	char raw[100];
    octet RAW = {0, sizeof(raw), raw};
    csprng RNGx;                // Crypto Strong RNG
	u32 ran = RNG_Get_RandomNum();	
    RAW.len = 100;              // fake random seed source
    RAW.val[0] = ran;
    RAW.val[1] = ran >> 8;
    RAW.val[2] = ran >> 16;
    RAW.val[3] = ran >> 24;
    for (u16 i = 4; i < 100; i++) RAW.val[i] = i;
    CREATE_CSPRNG(&RNGx, &RAW);  // initialise strong RNG
	
//new 
/*

	g_i_1 = g_1 ** self.SK
	s = group.random()
	h = gg ** s
	h_1 = g_1 ** s
	c = hashH(gg, self.VKs[self.i],h,g_1,g_i_1,h_1)
	z = s + self.SK * c
	return  (g_i_1,c,z)

*/	
	//g_1 -> M_point2
	//gg -> g
	//g_i_1 = g_1 ** self.SK
	
	//g_i_1 = g_1 ** self.SK
	BIG_256_28 num;
	for(int i=0;i<players;i++){
		ECP_BN254_copy(&Sigs[i],&M_point);
		PAIR_BN254_G1mul(&Sigs[i],SKs[i]);
	}
	
	//s = group.random()
	BIG_256_28 s;
	BIG_256_28_randomnum(s,modl, &RNGx);
	
	
	//h = gg ** s
	ECP_BN254 h;
	ECP_BN254_copy(&h,&g1);
	PAIR_BN254_G1mul(&h,s);
	
	//h_1 = g_1 ** s
	ECP_BN254 h_1;
	ECP_BN254_copy(&h_1,&M_point);
	PAIR_BN254_G1mul(&h_1,s);
	
	//c = hashH(gg, self.VKs[self.i],h,g_1,g_i_1,h_1)
	u8 x = 0;
	u8 ch[600];
	int ch_idx = 0;
	for(int i=0;i<600;i++)ch[i] = 0;
	
	octet o;
	char o_ch[600];for(int i=0;i<600;i++)o_ch[i] = 0x00;
	o.val = o_ch;
	o.max = 600;
	//gg
	ECP_BN254_toOctet(&o,&g1,true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	//self.VKs[self.x]
	ECP_BN254_toOctet(&o,&VKs1[x],true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	//h
	ECP_BN254_toOctet(&o,&h,true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	//g_1
	ECP_BN254_toOctet(&o,&M_point,true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	//g_i_1
	ECP_BN254_toOctet(&o,&Sigs[x],true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	//h_1
	ECP_BN254_toOctet(&o,&h_1,true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	
	char digest[50];for(int i=0;i<50;i++)digest[i]=0x00;	
	hash256 sh256;
	HASH256_init(&sh256);
	for(int i=0;i<ch_idx;i++) HASH256_process(&sh256,ch[i]);
    HASH256_hash(&sh256,digest);
	
	BIG_256_28 c;
	BIG_256_28_fromBytesLen(c, digest,32);
	BIG_256_28_mod(c,modl);
	
	//z = s + self.SK * c
	BIG_256_28 z;
	BIG_256_28 tmp;
	BIG_256_28_modmul(tmp,SKs[x],c,modl);
	BIG_256_28_modadd(z,s,tmp,modl);
	

	
	
/*************************************************************************/
//verify
	
//		assert 0 <= i < self.l
//        h = ( gg ** z )/(self.VKs[i] ** c)
//        h_1 = ( g_1 ** z)/(sig ** c)
//        c_1 = hashH(gg, self.VKs[i],h,g_1,sig,h_1)
//        return c_1 == c
	
	////g_1 -> M_point2
	//gg -> g
	//g_i_1 = g_1 ** self.SK
	
	
	//h = ( gg ** z )/(self.VKs[i] ** c)
	ECP_BN254 hx;
	ECP_BN254 tmp1,tmp2,tmp3;
	ECP_BN254_copy(&tmp1,&g1);
	PAIR_BN254_G1mul(&tmp1,z);
	ECP_BN254_copy(&tmp2,&VKs1[x]);
	PAIR_BN254_G1mul(&tmp2,c);
	ECP_BN254_neg(&tmp2);
	ECP_BN254_add(&tmp1,&tmp2);
	ECP_BN254_copy(&hx,&tmp1);
	
	
	
	//h_1 = ( g_1 ** z)/(sig ** c)
	ECP_BN254 hx_1;
//	ECP_BN254 tmp1,tmp2;
	ECP_BN254_copy(&tmp1,&M_point);
	PAIR_BN254_G1mul(&tmp1,z);
	ECP_BN254_copy(&tmp2,&Sigs[x]);
	PAIR_BN254_G1mul(&tmp2,c);
	ECP_BN254_neg(&tmp2);
	ECP_BN254_add(&tmp1,&tmp2);
	ECP_BN254_copy(&hx_1,&tmp1);
	
	
//  c_1 = hashH(gg, self.VKs[i],h,g_1,sig,h_1)

	ch_idx = 0;
	for(int i=0;i<600;i++)ch[i] = 0;
	for(int i=0;i<600;i++)o_ch[i] = 0x00;
	//gg
	ECP_BN254_toOctet(&o,&g1,true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	//self.VKs[self.x]
	ECP_BN254_toOctet(&o,&VKs1[x],true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	//h
	ECP_BN254_toOctet(&o,&hx,true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	//g_1
	ECP_BN254_toOctet(&o,&M_point,true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	//sig
	ECP_BN254_toOctet(&o,&Sigs[x],true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	//h_1
	ECP_BN254_toOctet(&o,&hx_1,true);
	for(int i=0;i<o.len;i++){ch[ch_idx] = o.val[i];ch_idx++;}
	
	for(int i=0;i<50;i++)digest[i]=0x00;	
	HASH256_init(&sh256);
	for(int i=0;i<ch_idx;i++) HASH256_process(&sh256,ch[i]);
    HASH256_hash(&sh256,digest);
	
	BIG_256_28 c_1;
	BIG_256_28_fromBytesLen(c_1, digest,32);
	BIG_256_28_mod(c_1,modl);
	
	if(BIG_256_28_comp(c,c_1)==0){
		sprintf((char*)Send_Data_buff,"fangjia");
		LoRa_SendData(Send_Data_buff);
	}else{
		sprintf((char*)Send_Data_buff,"not not not");
		LoRa_SendData(Send_Data_buff);
	}
	//h hx
	if(ECP_BN254_equals(&h,&hx)){
		sprintf((char*)Send_Data_buff,"fangjia!!!!!!!!!!!!!!!");
		LoRa_SendData(Send_Data_buff);
	}else{
		sprintf((char*)Send_Data_buff,"not not not!!!!!!!!!!!!!");
		LoRa_SendData(Send_Data_buff);
	}
	if(ECP_BN254_equals(&h_1,&hx_1)){
		sprintf((char*)Send_Data_buff,"fangjia!!!!!!!!!!!!!!!");
		LoRa_SendData(Send_Data_buff);
	}else{
		sprintf((char*)Send_Data_buff,"not not not!!!!!!!!!!!!!");
		LoRa_SendData(Send_Data_buff);
	}
	while(1);



	
	// old
/*

	def sign(self, h):
	return h ** self.SK

*/
	
// 	TIM9_Exceed_Times = 0;
// 	TIM9->CNT = 0;
	
// 	//h ** sk
// 	BIG_256_28 num;
// 	for(int i=0;i<players;i++){
// 		FP_BN254_redc(num,&SKs[i]);
// 		ECP_BN254_copy(&Sigs[i],&M_point);
// 		PAIR_BN254_G1mul(&Sigs[i],num);
// 	}
	
// 	u32 time = TIM9->CNT + TIM9_Exceed_Times * 5000;	SK_sign_time[Run_idx] = time;
// 	sprintf((char*)Send_Data_buff,"SK_sign:%d",time);
// 	LoRa_SendData(Send_Data_buff);
	
// //	sprintf((char*)Send_Data_buff,"Sign: Yes");
// //	LoRa_SendData(Send_Data_buff);
	
}

void PK_verify_sig_share(){
 	TIM9_Exceed_Times = 0;
 	TIM9->CNT = 0;
	
 //	B = self.VKs[i]
 //	assert pair(g2, sig) == pair(B, h)
 //	return True
 	ECP2_BN254 B;
 	ECP2_BN254 g2_neg;
 	ECP2_BN254_copy(&g2_neg,&g2);
 	ECP2_BN254_neg(&g2_neg);
 	for(int i=0;i<players;i++){
 		TIM2_Exceed_Times = 0;
 		TIM2->CNT = 0;
		
 		ECP2_BN254_copy(&B,&VKs[i]);
 		FP12_BN254 v;
 		PAIR_BN254_double_ate(&v,&g2_neg,&Sigs[i],&B,&M_point);
 		PAIR_BN254_fexp(&v);
		
		u32 timex = TIM2->CNT + TIM2_Exceed_Times * 9000;
		
		if (FP12_BN254_isunity(&v)){
			sprintf((char*)Send_Data_buff,"PK_verify_sig_share[%d]: Yes %d",i,timex);
			LoRa_SendData(Send_Data_buff);
		}else{
			sprintf((char*)Send_Data_buff,"PK_verify_sig_share[%d]: No %d",i,timex);
			LoRa_SendData(Send_Data_buff);
		}
 	}
	
 	u32 time = TIM9->CNT + TIM9_Exceed_Times * 5000;	PK_verify_sig_share_time[Run_idx] = time;
 	sprintf((char*)Send_Data_buff,"PK_verify_sig_share %d : %d",players,time);
 	LoRa_SendData(Send_Data_buff);
 }

void PK_verify_sig(){
	
 	TIM9_Exceed_Times = 0;
 	TIM9->CNT = 0;
	
 //	assert pair(sig, g2) == pair(h, self.VK)
 //  return True
 	ECP2_BN254 g2_neg;
 	ECP2_BN254_copy(&g2_neg,&g2);
 	ECP2_BN254_neg(&g2_neg);
 	FP12_BN254 v;
 	PAIR_BN254_double_ate(&v,&g2_neg,&SIG,&VK,&M_point);
 	PAIR_BN254_fexp(&v);
	
 	u32 time = TIM9->CNT + TIM9_Exceed_Times * 5000;	PK_verify_sig_time[Run_idx] = time;
 	sprintf((char*)Send_Data_buff,"PK_verify_sig:%d",time);
 	LoRa_SendData(Send_Data_buff);
	
	
 	if (FP12_BN254_isunity(&v)){
 		sprintf((char*)Send_Data_buff,"PK_verify_sig: Yes");
 		LoRa_SendData(Send_Data_buff);
 	}else{
 		sprintf((char*)Send_Data_buff,"PK_verify_sig: No");
 		LoRa_SendData(Send_Data_buff);
 	}
 }



void PK_sig_combine_share(){
//	// TIM9_Exceed_Times = 0;
//	// TIM9->CNT = 0;

//	//	def combine_shares(self, (U,V,W), shares):
//	//	# sigs: a mapping from idx -> sig
//	//	S = set(shares.keys())
//	//	assert S.issubset(range(self.l))

//	//	# ASSUMPTION
//	//	# assert self.verify_ciphertext((U,V,W))

//	//	mul = lambda a,b: a*b
//	//	res = reduce(mul, [sig ** self.lagrange(S, j) for j,sig in sigs.iteritems()], 1)
//    //  return res

//	TIM9_Exceed_Times = 0;
//	TIM9->CNT = 0;
//while(1){


	BIG_256_28 larg;
	ECP_BN254 tmp;
	ECP_BN254 r[20];
	
	S[0] = 4;S[1] = 0;S[2] = 5;
	for(int j=0 ; j<k ; j++){
//		share ** self.lagrange(S, j)
		u8 jj = S[j];
		lagrange(larg,jj);
		ECP_BN254_copy(&tmp,&Sigs[jj]);
		PAIR_BN254_G1mul(&tmp,larg);
		ECP_BN254_copy(&r[j],&tmp);	
	}
	
	for(int j=1 ; j<k ; j++){
		ECP_BN254_add(&r[0],&r[j]);//这里可能不是Group元素了！
	}
	ECP_BN254_copy(&SIG,&r[0]);	
	
	PK_verify_sig();

}

void tendermint2(){
	
	init();
	init_public_key();

	players = 4;
	k = 2; 
	
	//sha256 init
	char test256[]="abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
	char digest[50];
	hash256 sh256;
	
	int i;
	BIG_256_28 q, modl;
	
	char raw[100];
    octet RAW = {0, sizeof(raw), raw};
    csprng RNGx;                // Crypto Strong RNG
	u32 ran = RNG_Get_RandomNum();	
    RAW.len = 100;              // fake random seed source
    for (u16 i = 0; i < 100; i++) RAW.val[i] = i;
    CREATE_CSPRNG(&RNGx, &RAW);  // initialise strong RNG
	
	char mc[] = "geng1";
	for(int i=0;i<50;i++)digest[i] = NULL;
	HASH256_init(&sh256);
	for (i=0;mc[i]!=0;i++) HASH256_process(&sh256,mc[i]);
    HASH256_hash(&sh256,digest);
	BIG_256_28_fromBytes(q,digest);
	
	if(!ECP_BN254_generator(&G1)){
		sprintf((char*)Send_Data_buff,"G1 generator Fail");
		LoRa_SendData(Send_Data_buff);
	}
	
	ECP_BN254_copy(&g1,&G1);
	PAIR_BN254_G1mul(&g1,q);
	
	if (!ECP2_BN254_generator(&G2)){
		sprintf((char*)Send_Data_buff,"G2 generator Fail");
		LoRa_SendData(Send_Data_buff);
	}
	ECP2_BN254_copy(&g2,&G2);
	PAIR_BN254_G2mul(&g2,q);
	
	dealer();

	for(int i=0;i<50;i++)digest[i] = NULL;
	HASH256_init(&sh256);
	for (i=0;test256[i]!=0;i++) HASH256_process(&sh256,test256[i]);
    HASH256_hash(&sh256,digest);
	
	BIG_256_28 M_num;
	BIG_256_28_fromBytesLen(M_num, digest,32);
	BIG_256_28_mod(M_num,modl);
	ECP_BN254_copy(&M_point,&g1);
	PAIR_BN254_G1mul(&M_point,M_num);
	
	//Thresprf
	SK_sign();
	PK_verify_sig_share();
	PK_sig_combine_share();
	
	while(1);
}

/***************************************************************************************/








