<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\PRBC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\PRBC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Sat Mar 15 18:29:35 2025
<BR><P>
<H3>Maximum Stack Usage =       7688 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
eventgroup_task &rArr; PACKET_handler &rArr; PRBC_PK_verify_sig_share &rArr; PAIR_BN158_double_ate &rArr; PAIR_BN158_ate &rArr; FP12_BN158_ssmul &rArr; FP12_BN158_smul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f7xx_it.o(i.BusFault_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4f]">CAN2_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4c]">CAN2_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[74]">CAN3_RX0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[75]">CAN3_RX1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[76]">CAN3_SCE_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[73]">CAN3_TX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6a]">CEC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5b]">DCMI_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6e]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6f]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[70]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[71]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream1_IRQHandler</a> from dma.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream3_IRQHandler</a> from dma.o(i.DMA1_Stream3_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[66]">DMA2D_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f7xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4a]">ETH_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4b]">ETH_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from mw1268_app.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3d]">FMC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5d]">FPU_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f7xx_it.o(i.HardFault_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[56]">I2C3_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[55]">I2C3_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6c]">I2C4_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6b]">I2C4_EV_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[77]">JPEG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[69]">LPTIM1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[65]">LTDC_ER_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[64]">LTDC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[78]">MDIOS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f7xx_it.o(i.MemManage_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f7xx_it.o(i.NMI_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[50]">OTG_FS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[68]">QUADSPI_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5c]">RNG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[63]">SAI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[67]">SAI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3e]">SDMMC1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[72]">SDMMC2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[6d]">SPDIF_RX_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[60]">SPI4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[61]">SPI5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[62]">SPI6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7a]">SystemInit</a> from system_stm32f7xx.o(i.SystemInit) referenced from startup_stm32f767xx.o(.text)
 <LI><a href="#[f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_TIM9_IRQHandler</a> from btim.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[26]">TIM1_UP_TIM10_IRQHandler</a> from btim.o(i.TIM1_UP_TIM10_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from btim.o(i.TIM2_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from btim.o(i.TIM5_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from btim.o(i.TIM7_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[39]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5e]">UART7_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[5f]">UART8_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[7c]">UART_DMAAbortOnError</a> from stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[7f]">UART_DMAError</a> from stm32f7xx_hal_uart.o(i.UART_DMAError) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[7d]">UART_DMAReceiveCplt</a> from stm32f7xx_hal_uart.o(i.UART_DMAReceiveCplt) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[7e]">UART_DMARxHalfCplt</a> from stm32f7xx_hal_uart.o(i.UART_DMARxHalfCplt) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
 <LI><a href="#[80]">UART_RxISR_16BIT</a> from stm32f7xx_hal_uart.o(i.UART_RxISR_16BIT) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[81]">UART_RxISR_8BIT</a> from stm32f7xx_hal_uart.o(i.UART_RxISR_8BIT) referenced from stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
 <LI><a href="#[32]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from usart3.o(i.USART3_IRQHandler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[54]">USART6_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f7xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f767xx.o(.text) referenced from startup_stm32f767xx.o(RESET)
 <LI><a href="#[8d]">x_side_default(unsigned*, const unsigned*, const uECC_Curve_t*)</a> from uecc.o(i._Z14x_side_defaultPjPKjPK12uECC_Curve_t) referenced 4 times from uecc.o(.constdata)
 <LI><a href="#[8c]">mod_sqrt_default(unsigned*, const uECC_Curve_t*)</a> from uecc.o(i._Z16mod_sqrt_defaultPjPK12uECC_Curve_t) referenced 4 times from uecc.o(.constdata)
 <LI><a href="#[94]">x_side_secp256k1(unsigned*, const unsigned*, const uECC_Curve_t*)</a> from uecc.o(i._Z16x_side_secp256k1PjPKjPK12uECC_Curve_t) referenced from uecc.o(.constdata)
 <LI><a href="#[90]">mod_sqrt_secp224r1(unsigned*, const uECC_Curve_t*)</a> from uecc.o(i._Z18mod_sqrt_secp224r1PjPK12uECC_Curve_t) referenced from uecc.o(.constdata)
 <LI><a href="#[8b]">double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)</a> from uecc.o(i._Z23double_jacobian_defaultPjS_S_PK12uECC_Curve_t) referenced 4 times from uecc.o(.constdata)
 <LI><a href="#[8e]">vli_mmod_fast_secp160r1(unsigned*, unsigned*)</a> from uecc.o(i._Z23vli_mmod_fast_secp160r1PjS_) referenced from uecc.o(.constdata)
 <LI><a href="#[8f]">vli_mmod_fast_secp192r1(unsigned*, unsigned*)</a> from uecc.o(i._Z23vli_mmod_fast_secp192r1PjS_) referenced from uecc.o(.constdata)
 <LI><a href="#[91]">vli_mmod_fast_secp224r1(unsigned*, unsigned*)</a> from uecc.o(i._Z23vli_mmod_fast_secp224r1PjS_) referenced from uecc.o(.constdata)
 <LI><a href="#[95]">vli_mmod_fast_secp256k1(unsigned*, unsigned*)</a> from uecc.o(i._Z23vli_mmod_fast_secp256k1PjS_) referenced from uecc.o(.constdata)
 <LI><a href="#[92]">vli_mmod_fast_secp256r1(unsigned*, unsigned*)</a> from uecc.o(i._Z23vli_mmod_fast_secp256r1PjS_) referenced from uecc.o(.constdata)
 <LI><a href="#[93]">double_jacobian_secp256k1(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)</a> from uecc.o(i._Z25double_jacobian_secp256k1PjS_S_PK12uECC_Curve_t) referenced from uecc.o(.constdata)
 <LI><a href="#[7b]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f767xx.o(.text)
 <LI><a href="#[83]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[83]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[88]">eventgroup_task</a> from main.o(i.eventgroup_task) referenced from main.o(i.start_task)
 <LI><a href="#[87]">eventsetbit_task</a> from main.o(i.eventsetbit_task) referenced from main.o(i.start_task)
 <LI><a href="#[82]">fputc</a> from usart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[79]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[84]">my_RNG</a> from utility.o(i.my_RNG) referenced from utility.o(i.init_public_key)
 <LI><a href="#[89]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[86]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[8a]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[85]">start_task</a> from main.o(i.start_task) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[7b]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(.text)
</UL>
<P><STRONG><a name="[26d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[96]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[a8]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[26e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[26f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[270]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[271]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[272]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[273]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[268]"></a>__asm___6_port_c_tmp_1__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[267]"></a>__asm___6_port_c_tmp_1__prvEnableVFP</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[25e]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>CAN3_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>CAN3_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>CAN3_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>CAN3_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f767xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[274]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[275]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[21c]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
</UL>

<P><STRONG><a name="[276]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[277]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[278]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1bb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_INIT_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_ER_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SIG_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default(unsigned*, const uECC_Curve_t*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default(unsigned*, const unsigned*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[21f]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_check_cmd
</UL>

<P><STRONG><a name="[258]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_sendData
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[a7]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[20a]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[97]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[27c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[27d]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[a1]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[27e]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>Aux_Int</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mw1268_app.o(i.Aux_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Aux_Int &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Set
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>BIG_160_28_add</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, big_160_28.o(i.BIG_160_28_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BIG_160_28_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_div2
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_add
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glv
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modadd
</UL>

<P><STRONG><a name="[14c]"></a>BIG_160_28_bit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, big_160_28.o(i.BIG_160_28_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BIG_160_28_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
</UL>

<P><STRONG><a name="[b8]"></a>BIG_160_28_cmove</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, big_160_28.o(i.BIG_160_28_cmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BIG_160_28_cmove
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_div2
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_cmove
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
</UL>

<P><STRONG><a name="[c8]"></a>BIG_160_28_comp</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, big_160_28.o(i.BIG_160_28_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BIG_160_28_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_islarger
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_equals
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
</UL>

<P><STRONG><a name="[be]"></a>BIG_160_28_copy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, big_160_28.o(i.BIG_160_28_copy))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_div2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctmod
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_toBytes
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modneg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_moddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modadd
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lagrange
</UL>

<P><STRONG><a name="[ad]"></a>BIG_160_28_ctddiv</STRONG> (Thumb, 160 bytes, Stack size 172 bytes, big_160_28.o(i.BIG_160_28_ctddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = BIG_160_28_ctddiv &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dsub
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dnorm
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dscopy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_cmove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_shl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_zero
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_inc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_add
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dshr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dshl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dcmove
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glv
</UL>

<P><STRONG><a name="[bb]"></a>BIG_160_28_ctdmod</STRONG> (Thumb, 104 bytes, Stack size 120 bytes, big_160_28.o(i.BIG_160_28_ctdmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BIG_160_28_ctdmod &rArr; BIG_160_28_dcmove
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dsub
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dnorm
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dscopy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_sdcopy
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dshr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dshl
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dcmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_moddiv
</UL>

<P><STRONG><a name="[bd]"></a>BIG_160_28_ctmod</STRONG> (Thumb, 90 bytes, Stack size 68 bytes, big_160_28.o(i.BIG_160_28_ctmod))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = BIG_160_28_ctmod &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_sub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_cmove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_shl
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glv
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mod
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modadd
</UL>

<P><STRONG><a name="[15a]"></a>BIG_160_28_dadd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, big_160_28.o(i.BIG_160_28_dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BIG_160_28_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
</UL>

<P><STRONG><a name="[b5]"></a>BIG_160_28_dcmove</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, big_160_28.o(i.BIG_160_28_dcmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BIG_160_28_dcmove
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctdmod
</UL>

<P><STRONG><a name="[c0]"></a>BIG_160_28_dec</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, big_160_28.o(i.BIG_160_28_dec))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BIG_160_28_dec &rArr; BIG_160_28_norm
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_progen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_nbits
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
</UL>

<P><STRONG><a name="[af]"></a>BIG_160_28_dnorm</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, big_160_28.o(i.BIG_160_28_dnorm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BIG_160_28_dnorm
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctdmod
</UL>

<P><STRONG><a name="[ae]"></a>BIG_160_28_dscopy</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, big_160_28.o(i.BIG_160_28_dscopy))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_redc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctdmod
</UL>

<P><STRONG><a name="[b3]"></a>BIG_160_28_dshl</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, big_160_28.o(i.BIG_160_28_dshl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BIG_160_28_dshl
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctdmod
</UL>

<P><STRONG><a name="[b9]"></a>BIG_160_28_dshr</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, big_160_28.o(i.BIG_160_28_dshr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BIG_160_28_dshr
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctdmod
</UL>

<P><STRONG><a name="[b4]"></a>BIG_160_28_dsub</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, big_160_28.o(i.BIG_160_28_dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BIG_160_28_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctdmod
</UL>

<P><STRONG><a name="[159]"></a>BIG_160_28_dsucopy</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, big_160_28.o(i.BIG_160_28_dsucopy))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
</UL>

<P><STRONG><a name="[165]"></a>BIG_160_28_dzero</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, big_160_28.o(i.BIG_160_28_dzero))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_redc
</UL>

<P><STRONG><a name="[c1]"></a>BIG_160_28_fromBytes</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, big_160_28.o(i.BIG_160_28_fromBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BIG_160_28_fromBytes &rArr; BIG_160_28_fshl
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshl
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_fromBytes
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SK_sign
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_fromOctet
</UL>

<P><STRONG><a name="[c2]"></a>BIG_160_28_fshl</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, big_160_28.o(i.BIG_160_28_fshl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BIG_160_28_fshl
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fromBytes
</UL>

<P><STRONG><a name="[ba]"></a>BIG_160_28_fshr</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, big_160_28.o(i.BIG_160_28_fshr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BIG_160_28_fshr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_progen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_div2
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_toBytes
</UL>

<P><STRONG><a name="[b1]"></a>BIG_160_28_inc</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, big_160_28.o(i.BIG_160_28_inc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BIG_160_28_inc &rArr; BIG_160_28_norm
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_imul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lagrange
</UL>

<P><STRONG><a name="[c3]"></a>BIG_160_28_invmodp</STRONG> (Thumb, 398 bytes, Stack size 164 bytes, big_160_28.o(i.BIG_160_28_invmodp))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = BIG_160_28_invmodp &rArr; BIG_160_28_mod &rArr; BIG_160_28_ctmod &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_sub
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_cmove
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_parity
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mod
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_iszilch
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshr
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_comp
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_zero
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_one
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_add
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_moddiv
</UL>

<P><STRONG><a name="[160]"></a>BIG_160_28_isunity</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, big_160_28.o(i.BIG_160_28_isunity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BIG_160_28_isunity
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_isunity
</UL>

<P><STRONG><a name="[c5]"></a>BIG_160_28_iszilch</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, big_160_28.o(i.BIG_160_28_iszilch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BIG_160_28_iszilch
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_iszilch
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
</UL>

<P><STRONG><a name="[c9]"></a>BIG_160_28_lastbits</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, big_160_28.o(i.BIG_160_28_lastbits))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BIG_160_28_lastbits &rArr; BIG_160_28_norm
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
</UL>

<P><STRONG><a name="[c4]"></a>BIG_160_28_mod</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, big_160_28.o(i.BIG_160_28_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BIG_160_28_mod &rArr; BIG_160_28_ctmod &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctmod
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modneg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_moddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modadd
</UL>

<P><STRONG><a name="[cb]"></a>BIG_160_28_modadd</STRONG> (Thumb, 74 bytes, Stack size 68 bytes, big_160_28.o(i.BIG_160_28_modadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = BIG_160_28_modadd &rArr; BIG_160_28_mod &rArr; BIG_160_28_ctmod &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctmod
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lagrange
</UL>

<P><STRONG><a name="[cc]"></a>BIG_160_28_moddiv</STRONG> (Thumb, 84 bytes, Stack size 144 bytes, big_160_28.o(i.BIG_160_28_moddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = BIG_160_28_moddiv &rArr; BIG_160_28_invmodp &rArr; BIG_160_28_mod &rArr; BIG_160_28_ctmod &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mod
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctdmod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lagrange
</UL>

<P><STRONG><a name="[ce]"></a>BIG_160_28_modmul</STRONG> (Thumb, 82 bytes, Stack size 120 bytes, big_160_28.o(i.BIG_160_28_modmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BIG_160_28_modmul &rArr; BIG_160_28_ctdmod &rArr; BIG_160_28_dcmove
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mul
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mod
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctdmod
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glv
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lagrange
</UL>

<P><STRONG><a name="[cf]"></a>BIG_160_28_modneg</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, big_160_28.o(i.BIG_160_28_modneg))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = BIG_160_28_modneg &rArr; BIG_160_28_mod &rArr; BIG_160_28_ctmod &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_sub
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mod
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lagrange
</UL>

<P><STRONG><a name="[161]"></a>BIG_160_28_monty</STRONG> (Thumb, 1082 bytes, Stack size 136 bytes, big_160_28.o(i.BIG_160_28_monty))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BIG_160_28_monty
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mod
</UL>

<P><STRONG><a name="[cd]"></a>BIG_160_28_mul</STRONG> (Thumb, 952 bytes, Stack size 88 bytes, big_160_28.o(i.BIG_160_28_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = BIG_160_28_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_nres
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_moddiv
</UL>

<P><STRONG><a name="[ca]"></a>BIG_160_28_nbits</STRONG> (Thumb, 78 bytes, Stack size 44 bytes, big_160_28.o(i.BIG_160_28_nbits))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BIG_160_28_nbits &rArr; BIG_160_28_norm
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_nbits
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mod
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_moddiv
</UL>

<P><STRONG><a name="[b7]"></a>BIG_160_28_norm</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, big_160_28.o(i.BIG_160_28_norm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BIG_160_28_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_islarger
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_imul
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_div2
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_or
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_lastbits
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dec
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_nbits
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_toBytes
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modneg
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_inc
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lagrange
</UL>

<P><STRONG><a name="[c6]"></a>BIG_160_28_one</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, big_160_28.o(i.BIG_160_28_one))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_one
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lagrange
</UL>

<P><STRONG><a name="[d0]"></a>BIG_160_28_or</STRONG> (Thumb, 46 bytes, Stack size 20 bytes, big_160_28.o(i.BIG_160_28_or))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BIG_160_28_or &rArr; BIG_160_28_norm
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
</UL>

<P><STRONG><a name="[c7]"></a>BIG_160_28_parity</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, big_160_28.o(i.BIG_160_28_parity))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sign
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_div2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
</UL>

<P><STRONG><a name="[d1]"></a>BIG_160_28_pmul</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, big_160_28.o(i.BIG_160_28_pmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muladd_160_28
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_imul
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_nbits
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
</UL>

<P><STRONG><a name="[fc]"></a>BIG_160_28_rcopy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, big_160_28.o(i.BIG_160_28_rcopy))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_progen
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mod
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_rhs
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_rcopy
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_islarger
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_div2
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_nbits
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_nres
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_generator
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lagrange
</UL>

<P><STRONG><a name="[bc]"></a>BIG_160_28_sdcopy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, big_160_28.o(i.BIG_160_28_sdcopy))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctdmod
</UL>

<P><STRONG><a name="[b2]"></a>BIG_160_28_shl</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, big_160_28.o(i.BIG_160_28_shl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BIG_160_28_shl
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
</UL>

<P><STRONG><a name="[164]"></a>BIG_160_28_shr</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, big_160_28.o(i.BIG_160_28_shr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BIG_160_28_shr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_progen
</UL>

<P><STRONG><a name="[168]"></a>BIG_160_28_sqr</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, big_160_28.o(i.BIG_160_28_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BIG_160_28_sqr
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
</UL>

<P><STRONG><a name="[167]"></a>BIG_160_28_ssn</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, big_160_28.o(i.BIG_160_28_ssn))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BIG_160_28_ssn
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
</UL>

<P><STRONG><a name="[bf]"></a>BIG_160_28_sub</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, big_160_28.o(i.BIG_160_28_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BIG_160_28_sub
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_islarger
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctmod
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modneg
</UL>

<P><STRONG><a name="[d3]"></a>BIG_160_28_toBytes</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, big_160_28.o(i.BIG_160_28_toBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BIG_160_28_toBytes &rArr; BIG_160_28_fshr
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshr
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_toOctet
</UL>

<P><STRONG><a name="[b0]"></a>BIG_160_28_zero</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, big_160_28.o(i.BIG_160_28_zero))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_zero
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_imul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glv
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_invmodp
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fromBytes
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lagrange
</UL>

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 374 bytes, Stack size 16 bytes, dma.o(i.DMA1_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DMA1_Stream1_IRQHandler &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, dma.o(i.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>ECP2_BN158_add</STRONG> (Thumb, 498 bytes, Stack size 464 bytes, ecp2_bn158.o(i.ECP2_BN158_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 968<LI>Call Chain = ECP2_BN158_add &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_imul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_sub
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_add
</UL>

<P><STRONG><a name="[de]"></a>ECP2_BN158_affine</STRONG> (Thumb, 112 bytes, Stack size 120 bytes, ecp2_bn158.o(i.ECP2_BN158_affine))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = ECP2_BN158_affine &rArr; FP2_BN158_inv &rArr; FP_BN158_inv &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_reduce
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_one
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_isunity
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_isinf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
</UL>

<P><STRONG><a name="[e7]"></a>ECP2_BN158_copy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ecp2_bn158.o(i.ECP2_BN158_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ECP2_BN158_copy &rArr; FP2_BN158_copy &rArr; FP_BN158_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_sub
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_select
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
</UL>

<P><STRONG><a name="[e8]"></a>ECP2_BN158_dbl</STRONG> (Thumb, 288 bytes, Stack size 344 bytes, ecp2_bn158.o(i.ECP2_BN158_dbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ECP2_BN158_dbl &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sub
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_imul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double
</UL>

<P><STRONG><a name="[ea]"></a>ECP2_BN158_frob</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, ecp2_bn158.o(i.ECP2_BN158_frob))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ECP2_BN158_frob &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_reduce
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_conj
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
</UL>

<P><STRONG><a name="[ec]"></a>ECP2_BN158_fromOctet</STRONG> (Thumb, 206 bytes, Stack size 144 bytes, ecp2_bn158.o(i.ECP2_BN158_fromOctet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1520<LI>Call Chain = ECP2_BN158_fromOctet &rArr; ECP2_BN158_setx &rArr; FP2_BN158_sqrt &rArr; FP_BN158_sqrt &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_islarger
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_fromBytes
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_setx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_neg
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
</UL>

<P><STRONG><a name="[f2]"></a>ECP2_BN158_generator</STRONG> (Thumb, 40 bytes, Stack size 120 bytes, ecp2_bn158.o(i.ECP2_BN158_generator))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = ECP2_BN158_generator &rArr; ECP2_BN158_set &rArr; ECP2_BN158_rhs &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_rcopy
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_set
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
</UL>

<P><STRONG><a name="[f4]"></a>ECP2_BN158_inf</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ecp2_bn158.o(i.ECP2_BN158_inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ECP2_BN158_inf &rArr; FP2_BN158_one &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_zero
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_one
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_setx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_set
</UL>

<P><STRONG><a name="[df]"></a>ECP2_BN158_isinf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ecp2_bn158.o(i.ECP2_BN158_isinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = ECP2_BN158_isinf &rArr; FP2_BN158_iszilch &rArr; FP_BN158_iszilch &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_iszilch
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_affine
</UL>

<P><STRONG><a name="[f7]"></a>ECP2_BN158_mul4</STRONG> (Thumb, 536 bytes, Stack size 2024 bytes, ecp2_bn158.o(i.ECP2_BN158_mul4))
<BR><BR>[Stack]<UL><LI>Max Depth = 3176<LI>Call Chain = ECP2_BN158_mul4 &rArr; ECP2_BN158_sub &rArr; ECP2_BN158_add &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_sub
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_dbl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_add
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_select
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_cmove
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_or
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dec
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_parity
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_copy
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_zero
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_inc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
</UL>

<P><STRONG><a name="[f1]"></a>ECP2_BN158_neg</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ecp2_bn158.o(i.ECP2_BN158_neg))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = ECP2_BN158_neg &rArr; FP2_BN158_neg &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_sub
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_select
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_fromOctet
</UL>

<P><STRONG><a name="[fb]"></a>ECP2_BN158_rhs</STRONG> (Thumb, 80 bytes, Stack size 96 bytes, ecp2_bn158.o(i.ECP2_BN158_rhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = ECP2_BN158_rhs &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_reduce
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_from_BIG
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_setx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_set
</UL>

<P><STRONG><a name="[ee]"></a>ECP2_BN158_set</STRONG> (Thumb, 78 bytes, Stack size 128 bytes, ecp2_bn158.o(i.ECP2_BN158_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = ECP2_BN158_set &rArr; ECP2_BN158_rhs &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_one
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_equals
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_rhs
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_inf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_generator
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_fromOctet
</UL>

<P><STRONG><a name="[ef]"></a>ECP2_BN158_setx</STRONG> (Thumb, 110 bytes, Stack size 104 bytes, ecp2_bn158.o(i.ECP2_BN158_setx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1376<LI>Call Chain = ECP2_BN158_setx &rArr; FP2_BN158_sqrt &rArr; FP_BN158_sqrt &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sign
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_reduce
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_qr
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_one
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_rhs
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_inf
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_fromOctet
</UL>

<P><STRONG><a name="[f9]"></a>ECP2_BN158_sub</STRONG> (Thumb, 34 bytes, Stack size 184 bytes, ecp2_bn158.o(i.ECP2_BN158_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = ECP2_BN158_sub &rArr; ECP2_BN158_add &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_add
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_neg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
</UL>

<P><STRONG><a name="[103]"></a>ECP_BN158_add</STRONG> (Thumb, 472 bytes, Stack size 240 bytes, ecp_bn158.o(i.ECP_BN158_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ECP_BN158_add &rArr; FP_BN158_imul &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sub
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_imul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_sub
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_sig_combine_share
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
</UL>

<P><STRONG><a name="[109]"></a>ECP_BN158_affine</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, ecp_bn158.o(i.ECP_BN158_affine))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = ECP_BN158_affine &rArr; FP_BN158_inv &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_one
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_inv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_equals
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_isinf
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_toOctet
</UL>

<P><STRONG><a name="[112]"></a>ECP_BN158_copy</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ecp_bn158.o(i.ECP_BN158_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ECP_BN158_copy &rArr; FP_BN158_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_sub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_select
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SK_sign
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_sig_combine_share
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_get
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
</UL>

<P><STRONG><a name="[113]"></a>ECP_BN158_dbl</STRONG> (Thumb, 270 bytes, Stack size 152 bytes, ecp_bn158.o(i.ECP_BN158_dbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = ECP_BN158_dbl &rArr; FP_BN158_imul &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sub
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_imul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
</UL>

<P><STRONG><a name="[115]"></a>ECP_BN158_fromOctet</STRONG> (Thumb, 214 bytes, Stack size 80 bytes, ecp_bn158.o(i.ECP_BN158_fromOctet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = ECP_BN158_fromOctet &rArr; ECP_BN158_setx &rArr; FP_BN158_sqrt &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_islarger
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_setx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_set
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_neg
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fromBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_sig_combine_share
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[11a]"></a>ECP_BN158_generator</STRONG> (Thumb, 36 bytes, Stack size 56 bytes, ecp_bn158.o(i.ECP_BN158_generator))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = ECP_BN158_generator &rArr; ECP_BN158_set &rArr; ECP_BN158_rhs &rArr; FP_BN158_rcopy &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
</UL>

<P><STRONG><a name="[11b]"></a>ECP_BN158_get</STRONG> (Thumb, 64 bytes, Stack size 104 bytes, ecp_bn158.o(i.ECP_BN158_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = ECP_BN158_get &rArr; ECP_BN158_affine &rArr; FP_BN158_inv &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sign
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_redc
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_isinf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_toOctet
</UL>

<P><STRONG><a name="[11e]"></a>ECP_BN158_inf</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ecp_bn158.o(i.ECP_BN158_inf))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = ECP_BN158_inf &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_zero
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_one
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_setx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_set
</UL>

<P><STRONG><a name="[10a]"></a>ECP_BN158_isinf</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ecp_bn158.o(i.ECP_BN158_isinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = ECP_BN158_isinf &rArr; FP_BN158_iszilch &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_iszilch
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_get
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
</UL>

<P><STRONG><a name="[121]"></a>ECP_BN158_mul2</STRONG> (Thumb, 626 bytes, Stack size 1144 bytes, ecp_bn158.o(i.ECP_BN158_mul2))
<BR><BR>[Stack]<UL><LI>Max Depth = 1816<LI>Call Chain = ECP_BN158_mul2 &rArr; ECP_BN158_sub &rArr; ECP_BN158_add &rArr; FP_BN158_imul &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_lastbits
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dec
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_cmove
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_sub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_select
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_cmove
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_dbl
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_parity
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_add
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_inc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
</UL>

<P><STRONG><a name="[119]"></a>ECP_BN158_neg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ecp_bn158.o(i.ECP_BN158_neg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ECP_BN158_neg &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_sub
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_select
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_fromOctet
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
</UL>

<P><STRONG><a name="[125]"></a>ECP_BN158_rhs</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, ecp_bn158.o(i.ECP_BN158_rhs))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ECP_BN158_rhs &rArr; FP_BN158_rcopy &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_rcopy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_setx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_set
</UL>

<P><STRONG><a name="[116]"></a>ECP_BN158_set</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, ecp_bn158.o(i.ECP_BN158_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ECP_BN158_set &rArr; ECP_BN158_rhs &rArr; FP_BN158_rcopy &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_one
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_equals
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_rhs
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_inf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_nres
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_fromOctet
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_generator
</UL>

<P><STRONG><a name="[117]"></a>ECP_BN158_setx</STRONG> (Thumb, 110 bytes, Stack size 72 bytes, ecp_bn158.o(i.ECP_BN158_setx))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = ECP_BN158_setx &rArr; FP_BN158_sqrt &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sign
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_qr
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_one
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_rhs
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_inf
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_nres
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_fromOctet
</UL>

<P><STRONG><a name="[122]"></a>ECP_BN158_sub</STRONG> (Thumb, 34 bytes, Stack size 96 bytes, ecp_bn158.o(i.ECP_BN158_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = ECP_BN158_sub &rArr; ECP_BN158_add &rArr; FP_BN158_imul &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_neg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
</UL>

<P><STRONG><a name="[12b]"></a>ECP_BN158_toOctet</STRONG> (Thumb, 168 bytes, Stack size 72 bytes, ecp_bn158.o(i.ECP_BN158_toOctet))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = ECP_BN158_toOctet &rArr; ECP_BN158_get &rArr; ECP_BN158_affine &rArr; FP_BN158_inv &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sign
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_islarger
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_get
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_toBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SK_sign
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_sig_combine_share
</UL>

<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 248 bytes, Stack size 8 bytes, mw1268_app.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI15_10_IRQHandler &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Pin_Set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_rx
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_Int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[130]"></a>FP12_BN158_conj</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, fp12_bn158.o(i.FP12_BN158_conj))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FP12_BN158_conj &rArr; FP4_BN158_nconj &rArr; FP2_BN158_neg &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_copy
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_nconj
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_conj
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
</UL>

<P><STRONG><a name="[131]"></a>FP12_BN158_copy</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, fp12_bn158.o(i.FP12_BN158_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FP12_BN158_copy &rArr; FP4_BN158_copy &rArr; FP2_BN158_copy &rArr; FP_BN158_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_sqr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_conj
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
</UL>

<P><STRONG><a name="[135]"></a>FP12_BN158_frob</STRONG> (Thumb, 88 bytes, Stack size 128 bytes, fp12_bn158.o(i.FP12_BN158_frob))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = FP12_BN158_frob &rArr; FP4_BN158_pmul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_pmul
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_frob
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
</UL>

<P><STRONG><a name="[138]"></a>FP12_BN158_from_FP4s</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, fp12_bn158.o(i.FP12_BN158_from_FP4s))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FP12_BN158_from_FP4s &rArr; FP4_BN158_copy &rArr; FP2_BN158_copy &rArr; FP_BN158_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_line
</UL>

<P><STRONG><a name="[139]"></a>FP12_BN158_inv</STRONG> (Thumb, 266 bytes, Stack size 464 bytes, fp12_bn158.o(i.FP12_BN158_inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1624<LI>Call Chain = FP12_BN158_inv &rArr; FP4_BN158_inv &rArr; FP2_BN158_inv &rArr; FP_BN158_inv &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_times_i
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sub
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sqr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_mul
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_inv
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
</UL>

<P><STRONG><a name="[141]"></a>FP12_BN158_isunity</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, fp12_bn158.o(i.FP12_BN158_isunity))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = FP12_BN158_isunity &rArr; FP4_BN158_isunity &rArr; FP2_BN158_isunity &rArr; FP_BN158_iszilch &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_iszilch
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_isunity
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
</UL>

<P><STRONG><a name="[144]"></a>FP12_BN158_mul</STRONG> (Thumb, 346 bytes, Stack size 688 bytes, fp12_bn158.o(i.FP12_BN158_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1432<LI>Call Chain = FP12_BN158_mul &rArr; FP4_BN158_mul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_norm
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_times_i
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_neg
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_mul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
</UL>

<P><STRONG><a name="[146]"></a>FP12_BN158_norm</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fp12_bn158.o(i.FP12_BN158_norm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FP12_BN158_norm &rArr; FP4_BN158_norm &rArr; FP2_BN158_norm &rArr; FP_BN158_norm &rArr; BIG_160_28_norm
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_sqr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_mul
</UL>

<P><STRONG><a name="[147]"></a>FP12_BN158_one</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, fp12_bn158.o(i.FP12_BN158_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = FP12_BN158_one &rArr; FP4_BN158_one &rArr; FP2_BN158_one &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_zero
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_one
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
</UL>

<P><STRONG><a name="[14a]"></a>FP12_BN158_pow</STRONG> (Thumb, 194 bytes, Stack size 760 bytes, fp12_bn158.o(i.FP12_BN158_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 2192<LI>Call Chain = FP12_BN158_pow &rArr; FP12_BN158_mul &rArr; FP4_BN158_mul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_pmul
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_usqr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_reduce
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_one
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_norm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_mul
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_copy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_conj
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_bit
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_iszilch
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
</UL>

<P><STRONG><a name="[14d]"></a>FP12_BN158_reduce</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, fp12_bn158.o(i.FP12_BN158_reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FP12_BN158_reduce &rArr; FP4_BN158_reduce &rArr; FP2_BN158_reduce &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_reduce
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_usqr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
</UL>

<P><STRONG><a name="[14f]"></a>FP12_BN158_smul</STRONG> (Thumb, 468 bytes, Stack size 520 bytes, fp12_bn158.o(i.FP12_BN158_smul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = FP12_BN158_smul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_pmul
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_zero
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_from_FP2s
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_from_FP2H
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
</UL>

<P><STRONG><a name="[153]"></a>FP12_BN158_sqr</STRONG> (Thumb, 288 bytes, Stack size 464 bytes, fp12_bn158.o(i.FP12_BN158_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1208<LI>Call Chain = FP12_BN158_sqr &rArr; FP4_BN158_mul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_norm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_copy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_times_i
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sqr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_neg
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_mul
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_copy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
</UL>

<P><STRONG><a name="[154]"></a>FP12_BN158_ssmul</STRONG> (Thumb, 808 bytes, Stack size 688 bytes, fp12_bn158.o(i.FP12_BN158_ssmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 1712<LI>Call Chain = FP12_BN158_ssmul &rArr; FP12_BN158_smul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_zero
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_norm
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_copy
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_times_i
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_qmul
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_pmul
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_neg
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_mul
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_copy
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
</UL>

<P><STRONG><a name="[14b]"></a>FP12_BN158_usqr</STRONG> (Thumb, 244 bytes, Stack size 464 bytes, fp12_bn158.o(i.FP12_BN158_usqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = FP12_BN158_usqr &rArr; FP4_BN158_sqr &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_reduce
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_times_i
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sqr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_nconj
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_copy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_conj
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
</UL>

<P><STRONG><a name="[d9]"></a>FP2_BN158_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FP2_BN158_add &rArr; FP_BN158_add &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sub
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_rhs
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_dbl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_add
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sqr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_neg
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_mul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_add
</UL>

<P><STRONG><a name="[e6]"></a>FP2_BN158_cmove</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_cmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FP2_BN158_cmove &rArr; FP_BN158_cmove &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_cmove
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_cmove
</UL>

<P><STRONG><a name="[eb]"></a>FP2_BN158_conj</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_conj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FP2_BN158_conj &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_qr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_frob
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_frob
</UL>

<P><STRONG><a name="[e4]"></a>FP2_BN158_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FP2_BN158_copy &rArr; FP_BN158_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_setx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_set
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_dbl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_affine
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_add
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_times_i
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sqr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_neg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_nconj
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_from_FP2s
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_from_FP2H
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_copy
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_conj
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_copy
</UL>

<P><STRONG><a name="[ff]"></a>FP2_BN158_equals</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FP2_BN158_equals &rArr; FP_BN158_equals &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_equals
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_set
</UL>

<P><STRONG><a name="[ed]"></a>FP2_BN158_fromBytes</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_fromBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = FP2_BN158_fromBytes &rArr; FP_BN158_fromBytes &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_fromBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_fromOctet
</UL>

<P><STRONG><a name="[fd]"></a>FP2_BN158_from_BIG</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_from_BIG))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FP2_BN158_from_BIG &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_zero
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_nres
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_rhs
</UL>

<P><STRONG><a name="[157]"></a>FP2_BN158_from_FP</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_from_FP))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FP2_BN158_from_FP &rArr; FP_BN158_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_zero
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_one
</UL>

<P><STRONG><a name="[158]"></a>FP2_BN158_from_FPs</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_from_FPs))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FP2_BN158_from_FPs &rArr; FP_BN158_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
</UL>

<P><STRONG><a name="[dc]"></a>FP2_BN158_imul</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_imul))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = FP2_BN158_imul &rArr; FP_BN158_imul &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_imul
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_dbl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_add
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double
</UL>

<P><STRONG><a name="[e3]"></a>FP2_BN158_inv</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, fp2_bn158.o(i.FP2_BN158_inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = FP2_BN158_inv &rArr; FP_BN158_inv &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_inv
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_affine
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_inv
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
</UL>

<P><STRONG><a name="[f0]"></a>FP2_BN158_islarger</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_islarger))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = FP2_BN158_islarger &rArr; FP_BN158_islarger &rArr; FP_BN158_iszilch &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_iszilch
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_islarger
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_fromOctet
</UL>

<P><STRONG><a name="[e1]"></a>FP2_BN158_isunity</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, fp2_bn158.o(i.FP2_BN158_isunity))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = FP2_BN158_isunity &rArr; FP_BN158_iszilch &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_one
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_iszilch
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_equals
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_affine
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_isunity
</UL>

<P><STRONG><a name="[f6]"></a>FP2_BN158_iszilch</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_iszilch))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = FP2_BN158_iszilch &rArr; FP_BN158_iszilch &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_iszilch
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_islarger
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_isinf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_iszilch
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_isunity
</UL>

<P><STRONG><a name="[d8]"></a>FP2_BN158_mul</STRONG> (Thumb, 232 bytes, Stack size 328 bytes, fp2_bn158.o(i.FP2_BN158_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dsucopy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dsub
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dnorm
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dadd
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mod
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_add
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_qr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_rhs
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_frob
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_dbl
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_affine
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_add
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_add
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_frob
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sqr
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_pmul
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_mul
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_inv
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_frob
</UL>

<P><STRONG><a name="[dd]"></a>FP2_BN158_mul_ip</STRONG> (Thumb, 60 bytes, Stack size 72 bytes, fp2_bn158.o(i.FP2_BN158_mul_ip))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = FP2_BN158_mul_ip &rArr; FP2_BN158_times_i &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_times_i
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_rhs
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_dbl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_add
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_add
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_times_i
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sqr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_mul
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_inv
</UL>

<P><STRONG><a name="[fa]"></a>FP2_BN158_neg</STRONG> (Thumb, 64 bytes, Stack size 72 bytes, fp2_bn158.o(i.FP2_BN158_neg))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = FP2_BN158_neg &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sub
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_setx
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_add
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sqr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_neg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_nconj
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_mul
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_inv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_conj
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_neg
</UL>

<P><STRONG><a name="[da]"></a>FP2_BN158_norm</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fp2_bn158.o(i.FP2_BN158_norm))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FP2_BN158_norm &rArr; FP_BN158_norm &rArr; BIG_160_28_norm
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_rhs
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_dbl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_add
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_add
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sqr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_mul
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_inv
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_neg
</UL>

<P><STRONG><a name="[e0]"></a>FP2_BN158_one</STRONG> (Thumb, 24 bytes, Stack size 40 bytes, fp2_bn158.o(i.FP2_BN158_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FP2_BN158_one &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_from_FP
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_one
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_setx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_set
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_inf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_affine
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_one
</UL>

<P><STRONG><a name="[150]"></a>FP2_BN158_pmul</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_pmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FP2_BN158_pmul &rArr; FP_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_line
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_qmul
</UL>

<P><STRONG><a name="[100]"></a>FP2_BN158_qr</STRONG> (Thumb, 38 bytes, Stack size 72 bytes, fp2_bn158.o(i.FP2_BN158_qr))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = FP2_BN158_qr &rArr; FP_BN158_qr &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_conj
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_qr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_setx
</UL>

<P><STRONG><a name="[f3]"></a>FP2_BN158_rcopy</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_rcopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = FP2_BN158_rcopy &rArr; FP_BN158_rcopy &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_rcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_generator
</UL>

<P><STRONG><a name="[e2]"></a>FP2_BN158_reduce</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fp2_bn158.o(i.FP2_BN158_reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FP2_BN158_reduce &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_setx
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_rhs
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_frob
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_affine
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_reduce
</UL>

<P><STRONG><a name="[102]"></a>FP2_BN158_sign</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fp2_bn158.o(i.FP2_BN158_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = FP2_BN158_sign &rArr; FP_BN158_sign &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sign
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_iszilch
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_setx
</UL>

<P><STRONG><a name="[e9]"></a>FP2_BN158_sqr</STRONG> (Thumb, 96 bytes, Stack size 96 bytes, fp2_bn158.o(i.FP2_BN158_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FP2_BN158_sqr &rArr; FP_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_set
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_rhs
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_frob
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_dbl
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_frob
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_inv
</UL>

<P><STRONG><a name="[101]"></a>FP2_BN158_sqrt</STRONG> (Thumb, 288 bytes, Stack size 224 bytes, fp2_bn158.o(i.FP2_BN158_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = FP2_BN158_sqrt &rArr; FP_BN158_sqrt &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sign
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_iszilch
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_cmove
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_qr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_inv
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_div2
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_cmove
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_setx
</UL>

<P><STRONG><a name="[db]"></a>FP2_BN158_sub</STRONG> (Thumb, 32 bytes, Stack size 72 bytes, fp2_bn158.o(i.FP2_BN158_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = FP2_BN158_sub &rArr; FP2_BN158_neg &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_dbl
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_add
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_add
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_inv
</UL>

<P><STRONG><a name="[15c]"></a>FP2_BN158_times_i</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, fp2_bn158.o(i.FP2_BN158_times_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = FP2_BN158_times_i &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
</UL>

<P><STRONG><a name="[f5]"></a>FP2_BN158_zero</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fp2_bn158.o(i.FP2_BN158_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FP2_BN158_zero &rArr; FP_BN158_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_inf
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_zero
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_one
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_from_FP2H
</UL>

<P><STRONG><a name="[13f]"></a>FP4_BN158_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fp4_bn158.o(i.FP4_BN158_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FP4_BN158_add &rArr; FP2_BN158_add &rArr; FP_BN158_add &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_usqr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_sqr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_mul
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_inv
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sub
</UL>

<P><STRONG><a name="[132]"></a>FP4_BN158_conj</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fp4_bn158.o(i.FP4_BN158_conj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FP4_BN158_conj &rArr; FP2_BN158_neg &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_usqr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_conj
</UL>

<P><STRONG><a name="[134]"></a>FP4_BN158_copy</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, fp4_bn158.o(i.FP4_BN158_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FP4_BN158_copy &rArr; FP2_BN158_copy &rArr; FP_BN158_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_usqr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_sqr
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_from_FP4s
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_copy
</UL>

<P><STRONG><a name="[136]"></a>FP4_BN158_frob</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, fp4_bn158.o(i.FP4_BN158_frob))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = FP4_BN158_frob &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_conj
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_frob
</UL>

<P><STRONG><a name="[152]"></a>FP4_BN158_from_FP2H</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fp4_bn158.o(i.FP4_BN158_from_FP2H))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FP4_BN158_from_FP2H &rArr; FP2_BN158_copy &rArr; FP_BN158_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_zero
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_line
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
</UL>

<P><STRONG><a name="[151]"></a>FP4_BN158_from_FP2s</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, fp4_bn158.o(i.FP4_BN158_from_FP2s))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FP4_BN158_from_FP2s &rArr; FP2_BN158_copy &rArr; FP_BN158_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_line
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
</UL>

<P><STRONG><a name="[140]"></a>FP4_BN158_inv</STRONG> (Thumb, 102 bytes, Stack size 128 bytes, fp4_bn158.o(i.FP4_BN158_inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = FP4_BN158_inv &rArr; FP2_BN158_inv &rArr; FP_BN158_inv &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sub
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_inv
</UL>

<P><STRONG><a name="[142]"></a>FP4_BN158_isunity</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fp4_bn158.o(i.FP4_BN158_isunity))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = FP4_BN158_isunity &rArr; FP2_BN158_isunity &rArr; FP_BN158_iszilch &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_iszilch
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_isunity
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_isunity
</UL>

<P><STRONG><a name="[143]"></a>FP4_BN158_iszilch</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fp4_bn158.o(i.FP4_BN158_iszilch))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FP4_BN158_iszilch &rArr; FP2_BN158_iszilch &rArr; FP_BN158_iszilch &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_iszilch
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_isunity
</UL>

<P><STRONG><a name="[13b]"></a>FP4_BN158_mul</STRONG> (Thumb, 150 bytes, Stack size 240 bytes, fp4_bn158.o(i.FP4_BN158_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 744<LI>Call Chain = FP4_BN158_mul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_sqr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_mul
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_inv
</UL>

<P><STRONG><a name="[133]"></a>FP4_BN158_nconj</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fp4_bn158.o(i.FP4_BN158_nconj))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = FP4_BN158_nconj &rArr; FP2_BN158_neg &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_usqr
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_conj
</UL>

<P><STRONG><a name="[145]"></a>FP4_BN158_neg</STRONG> (Thumb, 76 bytes, Stack size 128 bytes, fp4_bn158.o(i.FP4_BN158_neg))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = FP4_BN158_neg &rArr; FP2_BN158_neg &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_sqr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_mul
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sub
</UL>

<P><STRONG><a name="[13e]"></a>FP4_BN158_norm</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fp4_bn158.o(i.FP4_BN158_norm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FP4_BN158_norm &rArr; FP2_BN158_norm &rArr; FP_BN158_norm &rArr; BIG_160_28_norm
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_usqr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_sqr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_norm
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_mul
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_inv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_times_i
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_sqr
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_neg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_nconj
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_mul
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_conj
</UL>

<P><STRONG><a name="[148]"></a>FP4_BN158_one</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fp4_bn158.o(i.FP4_BN158_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = FP4_BN158_one &rArr; FP2_BN158_one &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_zero
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_one
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_one
</UL>

<P><STRONG><a name="[137]"></a>FP4_BN158_pmul</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fp4_bn158.o(i.FP4_BN158_pmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = FP4_BN158_pmul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_frob
</UL>

<P><STRONG><a name="[155]"></a>FP4_BN158_qmul</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, fp4_bn158.o(i.FP4_BN158_qmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = FP4_BN158_qmul &rArr; FP2_BN158_pmul &rArr; FP_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_pmul
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
</UL>

<P><STRONG><a name="[14e]"></a>FP4_BN158_reduce</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fp4_bn158.o(i.FP4_BN158_reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FP4_BN158_reduce &rArr; FP2_BN158_reduce &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_reduce
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_reduce
</UL>

<P><STRONG><a name="[13a]"></a>FP4_BN158_sqr</STRONG> (Thumb, 150 bytes, Stack size 184 bytes, fp4_bn158.o(i.FP4_BN158_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = FP4_BN158_sqr &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_usqr
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_sqr
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_inv
</UL>

<P><STRONG><a name="[13d]"></a>FP4_BN158_sub</STRONG> (Thumb, 32 bytes, Stack size 128 bytes, fp4_bn158.o(i.FP4_BN158_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = FP4_BN158_sub &rArr; FP4_BN158_neg &rArr; FP2_BN158_neg &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_neg
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_inv
</UL>

<P><STRONG><a name="[13c]"></a>FP4_BN158_times_i</STRONG> (Thumb, 50 bytes, Stack size 64 bytes, fp4_bn158.o(i.FP4_BN158_times_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = FP4_BN158_times_i &rArr; FP2_BN158_mul_ip &rArr; FP2_BN158_times_i &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_usqr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_sqr
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_mul
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_inv
</UL>

<P><STRONG><a name="[149]"></a>FP4_BN158_zero</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fp4_bn158.o(i.FP4_BN158_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FP4_BN158_zero &rArr; FP2_BN158_zero &rArr; FP_BN158_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_line
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_one
</UL>

<P><STRONG><a name="[105]"></a>FP_BN158_add</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, fp_bn158.o(i.FP_BN158_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = FP_BN158_add &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_add
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sub
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_rhs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_dbl
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_add
</UL>

<P><STRONG><a name="[111]"></a>FP_BN158_cmove</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fp_bn158.o(i.FP_BN158_cmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FP_BN158_cmove &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_cmove
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_cmove
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_cmove
</UL>

<P><STRONG><a name="[10f]"></a>FP_BN158_copy</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fp_bn158.o(i.FP_BN158_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FP_BN158_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_times_i
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_isunity
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_from_FPs
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_from_FP
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_conj
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sign
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_qr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_iszilch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_inv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_equals
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_div2
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_rhs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_dbl
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
</UL>

<P><STRONG><a name="[15d]"></a>FP_BN158_div2</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, fp_bn158.o(i.FP_BN158_div2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FP_BN158_div2 &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_cmove
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_parity
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_add
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
</UL>

<P><STRONG><a name="[10c]"></a>FP_BN158_equals</STRONG> (Thumb, 56 bytes, Stack size 72 bytes, fp_bn158.o(i.FP_BN158_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = FP_BN158_equals &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_comp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_isunity
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_equals
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_set
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
</UL>

<P><STRONG><a name="[156]"></a>FP_BN158_fromBytes</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, fp_bn158.o(i.FP_BN158_fromBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FP_BN158_fromBytes &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_nres
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fromBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_fromBytes
</UL>

<P><STRONG><a name="[108]"></a>FP_BN158_imul</STRONG> (Thumb, 106 bytes, Stack size 72 bytes, fp_bn158.o(i.FP_BN158_imul))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = FP_BN158_imul &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_pmul
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_nres
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_zero
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_inc
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_imul
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_dbl
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_add
</UL>

<P><STRONG><a name="[10d]"></a>FP_BN158_inv</STRONG> (Thumb, 118 bytes, Stack size 80 bytes, fp_bn158.o(i.FP_BN158_inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = FP_BN158_inv &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_progen
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
</UL>

<P><STRONG><a name="[118]"></a>FP_BN158_islarger</STRONG> (Thumb, 62 bytes, Stack size 80 bytes, fp_bn158.o(i.FP_BN158_islarger))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = FP_BN158_islarger &rArr; FP_BN158_iszilch &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_sub
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_redc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_iszilch
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_comp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_islarger
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_fromOctet
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_toOctet
</UL>

<P><STRONG><a name="[15f]"></a>FP_BN158_isunity</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, fp_bn158.o(i.FP_BN158_isunity))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FP_BN158_isunity &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_redc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_isunity
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_qr
</UL>

<P><STRONG><a name="[120]"></a>FP_BN158_iszilch</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, fp_bn158.o(i.FP_BN158_iszilch))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FP_BN158_iszilch &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_redc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_iszilch
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sign
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_iszilch
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_isunity
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_islarger
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_isinf
</UL>

<P><STRONG><a name="[15b]"></a>FP_BN158_mod</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, fp_bn158.o(i.FP_BN158_mod))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_monty
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_redc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_nres
</UL>

<P><STRONG><a name="[104]"></a>FP_BN158_mul</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, fp_bn158.o(i.FP_BN158_mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = FP_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mod
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqr
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_pmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_qr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_inv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_imul
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_rhs
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_dbl
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_add
</UL>

<P><STRONG><a name="[124]"></a>FP_BN158_neg</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, fp_bn158.o(i.FP_BN158_neg))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_sub
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshl
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logb2
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_times_i
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_conj
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sub
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_imul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_setx
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_neg
</UL>

<P><STRONG><a name="[106]"></a>FP_BN158_norm</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, fp_bn158.o(i.FP_BN158_norm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FP_BN158_norm &rArr; BIG_160_28_norm
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_conj
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_inv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_imul
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_dbl
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_neg
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_add
</UL>

<P><STRONG><a name="[128]"></a>FP_BN158_nres</STRONG> (Thumb, 42 bytes, Stack size 88 bytes, fp_bn158.o(i.FP_BN158_nres))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mul
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mod
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_fromBytes
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_from_BIG
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_rcopy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_one
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_imul
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_setx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_set
</UL>

<P><STRONG><a name="[10b]"></a>FP_BN158_one</STRONG> (Thumb, 24 bytes, Stack size 32 bytes, fp_bn158.o(i.FP_BN158_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_nres
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_one
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_one
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_isunity
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_setx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_set
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_inf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
</UL>

<P><STRONG><a name="[163]"></a>FP_BN158_pow</STRONG> (Thumb, 262 bytes, Stack size 544 bytes, fp_bn158.o(i.FP_BN158_pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_one
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_lastbits
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dec
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshr
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_progen
</UL>

<P><STRONG><a name="[15e]"></a>FP_BN158_progen</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, fp_bn158.o(i.FP_BN158_progen))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_shr
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dec
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshr
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_qr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_inv
</UL>

<P><STRONG><a name="[129]"></a>FP_BN158_qr</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, fp_bn158.o(i.FP_BN158_qr))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = FP_BN158_qr &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_progen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_isunity
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_qr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_setx
</UL>

<P><STRONG><a name="[126]"></a>FP_BN158_rcopy</STRONG> (Thumb, 28 bytes, Stack size 40 bytes, fp_bn158.o(i.FP_BN158_rcopy))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FP_BN158_rcopy &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_nres
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_rcopy
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_rhs
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
</UL>

<P><STRONG><a name="[11c]"></a>FP_BN158_redc</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, fp_bn158.o(i.FP_BN158_redc))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dzero
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dscopy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mod
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_isunity
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sign
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_iszilch
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_islarger
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_get
</UL>

<P><STRONG><a name="[10e]"></a>FP_BN158_reduce</STRONG> (Thumb, 138 bytes, Stack size 72 bytes, fp_bn158.o(i.FP_BN158_reduce))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_sub
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ssn
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_pmul
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fshl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quo
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;logb2
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_cmove
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_isunity
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_reduce
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sign
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_iszilch
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_inv
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_equals
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_add
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_setx
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_rhs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
</UL>

<P><STRONG><a name="[11d]"></a>FP_BN158_sign</STRONG> (Thumb, 38 bytes, Stack size 64 bytes, fp_bn158.o(i.FP_BN158_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = FP_BN158_sign &rArr; FP_BN158_redc &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_redc
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_parity
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sign
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_setx
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_get
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_toOctet
</UL>

<P><STRONG><a name="[114]"></a>FP_BN158_sqr</STRONG> (Thumb, 56 bytes, Stack size 64 bytes, fp_bn158.o(i.FP_BN158_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = FP_BN158_sqr &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_sqr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mod
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_pow
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqrt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_qr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_inv
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_rhs
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_dbl
</UL>

<P><STRONG><a name="[12a]"></a>FP_BN158_sqrt</STRONG> (Thumb, 226 bytes, Stack size 168 bytes, fp_bn158.o(i.FP_BN158_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = FP_BN158_sqrt &rArr; FP_BN158_progen &rArr; FP_BN158_pow &rArr; FP_BN158_one &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_progen
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_isunity
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sqr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_sign
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_norm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_cmove
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_nres
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqrt
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_setx
</UL>

<P><STRONG><a name="[107]"></a>FP_BN158_sub</STRONG> (Thumb, 32 bytes, Stack size 48 bytes, fp_bn158.o(i.FP_BN158_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = FP_BN158_sub &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_dbl
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_add
</UL>

<P><STRONG><a name="[11f]"></a>FP_BN158_zero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fp_bn158.o(i.FP_BN158_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FP_BN158_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_zero
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_from_FP
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_from_BIG
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_inf
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
</UL>

<P><STRONG><a name="[12c]"></a>GPIO_Pin_Set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, sys.o(i.GPIO_Pin_Set))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>HAL_DMA_Abort</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[195]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>HAL_DMA_DeInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Config_Rece
</UL>

<P><STRONG><a name="[191]"></a>HAL_DMA_GetError</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
</UL>

<P><STRONG><a name="[16d]"></a>HAL_DMA_Init</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Config_Rece
</UL>

<P><STRONG><a name="[16f]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, stm32f7xx_hal_dma.o(i.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>

<P><STRONG><a name="[ab]"></a>HAL_GPIO_Init</STRONG> (Thumb, 472 bytes, Stack size 24 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_gpioinit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_GpioInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_Int
</UL>

<P><STRONG><a name="[1b0]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Set
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
</UL>

<P><STRONG><a name="[1a9]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f7xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Set
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[16a]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>

<P><STRONG><a name="[171]"></a>HAL_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f7xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f7xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[1b7]"></a>HAL_MPU_ConfigRegion</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_ConfigRegion))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[1b6]"></a>HAL_MPU_Disable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Disable))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[1b8]"></a>HAL_MPU_Enable</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
</UL>

<P><STRONG><a name="[174]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_Int
</UL>

<P><STRONG><a name="[ac]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Config_Rece
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_Int
</UL>

<P><STRONG><a name="[176]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Config_Rece
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[172]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f7xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[17a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[17d]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[17c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[17e]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[17b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[17f]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1296 bytes, Stack size 24 bytes, stm32f7xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[180]"></a>HAL_RNG_GenerateRandomNumber</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, stm32f7xx_hal_rng.o(i.HAL_RNG_GenerateRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GetRandomNumber
</UL>

<P><STRONG><a name="[181]"></a>HAL_RNG_GetRandomNumber</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f7xx_hal_rng.o(i.HAL_RNG_GetRandomNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RNG_GetRandomNumber &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>

<P><STRONG><a name="[182]"></a>HAL_RNG_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f7xx_hal_rng.o(i.HAL_RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
</UL>

<P><STRONG><a name="[183]"></a>HAL_RNG_MspInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rng.o(i.HAL_RNG_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RNG_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
</UL>

<P><STRONG><a name="[213]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[175]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f7xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[18d]"></a>HAL_TIMEx_Break2Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_Break2Callback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim_ex.o(i.HAL_TIMEx_CommutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[184]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_timx_int_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_tim5_int_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_tim2_int_init
</UL>

<P><STRONG><a name="[185]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 278 bytes, Stack size 16 bytes, btim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[20f]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_timx_int_init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_tim5_int_init
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_tim2_int_init
</UL>

<P><STRONG><a name="[188]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[187]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 440 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_Break2Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM5_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_UP_TIM10_IRQHandler
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[189]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18a]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, btim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_timx_enable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[18e]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[197]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[198]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d4]"></a>HAL_UART_DMAStop</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_DMAStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_DMAStop &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetError
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[196]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[1dd]"></a>HAL_UART_GetState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[194]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 838 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[19a]"></a>HAL_UART_Init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_bpsset
</UL>

<P><STRONG><a name="[19b]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_UART_Receive_DMA</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_Receive_DMA &rArr; UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[1a0]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[1da]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, usart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAReceiveCplt
</UL>

<P><STRONG><a name="[1db]"></a>HAL_UART_RxHalfCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_RxHalfCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMARxHalfCplt
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_UART_Transmit</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_INIT_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_ER_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SIG_handler
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_sendData
</UL>

<P><STRONG><a name="[1dc]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[1a4]"></a>HASH256_hash</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, hash.o(i.HASH256_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HASH256_hash &rArr; HASH256_process &rArr; HASH256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SK_sign
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_INIT_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_ER_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SIG_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[1a7]"></a>HASH256_init</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, hash.o(i.HASH256_init))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SK_sign
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_INIT_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_ER_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SIG_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[1a5]"></a>HASH256_process</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hash.o(i.HASH256_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HASH256_process &rArr; HASH256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SK_sign
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_INIT_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_ER_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SIG_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>LED_Init</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, led.o(i.LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1aa]"></a>LoRa_Init</STRONG> (Thumb, 460 bytes, Stack size 24 bytes, mw1268_app.o(i.LoRa_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoRa_Init &rArr; usart3_bpsset &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_bpsset
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send_cmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;User_GpioInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_Int
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1b2]"></a>LoRa_SendData</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, mw1268_app.o(i.LoRa_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LoRa_SendData &rArr; usart3_sendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_sendData
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_data
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SK_sign
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventgroup_task
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[1b4]"></a>LoRa_Set</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, mw1268_app.o(i.LoRa_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = LoRa_Set &rArr; usart3_bpsset &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_bpsset
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send_cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Aux_Int
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
</UL>

<P><STRONG><a name="[1b5]"></a>MPU_Config</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, utility.o(i.MPU_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MPU_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Enable
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_Disable
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MPU_ConfigRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>MYDMA_Config_Rece</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, dma.o(i.MYDMA_Config_Rece))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MYDMA_Config_Rece &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_init
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1ba]"></a>PACKET_handler</STRONG> (Thumb, 1822 bytes, Stack size 752 bytes, main.o(i.PACKET_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 7680<LI>Call Chain = PACKET_handler &rArr; PRBC_PK_verify_sig_share &rArr; PAIR_BN158_double_ate &rArr; PAIR_BN158_ate &rArr; FP12_BN158_ssmul &rArr; FP12_BN158_smul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_secp160r1
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SK_sign
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_sig_combine_share
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_fromOctet
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventgroup_task
</UL>

<P><STRONG><a name="[1c3]"></a>PAIR_BN158_G1mul</STRONG> (Thumb, 188 bytes, Stack size 256 bytes, pair_bn158.o(i.PAIR_BN158_G1mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 2072<LI>Call Chain = PAIR_BN158_G1mul &rArr; ECP_BN158_mul2 &rArr; ECP_BN158_sub &rArr; ECP_BN158_add &rArr; FP_BN158_imul &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_rcopy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_mul
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;glv
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mod
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_neg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modneg
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SK_sign
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_sig_combine_share
</UL>

<P><STRONG><a name="[1c5]"></a>PAIR_BN158_G2mul</STRONG> (Thumb, 278 bytes, Stack size 976 bytes, pair_bn158.o(i.PAIR_BN158_G2mul))
<BR><BR>[Stack]<UL><LI>Max Depth = 4152<LI>Call Chain = PAIR_BN158_G2mul &rArr; ECP2_BN158_mul4 &rArr; ECP2_BN158_sub &rArr; ECP2_BN158_add &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_from_FPs
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_frob
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_rcopy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gs
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mod
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_neg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_copy
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modneg
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
</UL>

<P><STRONG><a name="[1c8]"></a>PAIR_BN158_ate</STRONG> (Thumb, 432 bytes, Stack size 1632 bytes, pair_bn158.o(i.PAIR_BN158_ate))
<BR><BR>[Stack]<UL><LI>Max Depth = 3344<LI>Call Chain = PAIR_BN158_ate &rArr; FP12_BN158_ssmul &rArr; FP12_BN158_smul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_from_FPs
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_frob
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_affine
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_rcopy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_nbits
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_line
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_sqr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_one
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_conj
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_bit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_isinf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_neg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
</UL>

<P><STRONG><a name="[1cc]"></a>PAIR_BN158_double_ate</STRONG> (Thumb, 760 bytes, Stack size 2296 bytes, pair_bn158.o(i.PAIR_BN158_double_ate))
<BR><BR>[Stack]<UL><LI>Max Depth = 5640<LI>Call Chain = PAIR_BN158_double_ate &rArr; PAIR_BN158_ate &rArr; FP12_BN158_ssmul &rArr; FP12_BN158_smul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_inv
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_from_FPs
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_frob
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_affine
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_rcopy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_copy
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_nbits
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_line
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_ssmul
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_sqr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_smul
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_one
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_conj
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_bit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_isinf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_affine
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_neg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
</UL>

<P><STRONG><a name="[1cd]"></a>PAIR_BN158_fexp</STRONG> (Thumb, 510 bytes, Stack size 1848 bytes, pair_bn158.o(i.PAIR_BN158_fexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 4040<LI>Call Chain = PAIR_BN158_fexp &rArr; FP12_BN158_pow &rArr; FP12_BN158_mul &rArr; FP4_BN158_mul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_from_FPs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_rcopy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_usqr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_reduce
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_pow
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_mul
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_inv
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_frob
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_copy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_conj
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
</UL>

<P><STRONG><a name="[1c9]"></a>PAIR_BN158_nbits</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, pair_bn158.o(i.PAIR_BN158_nbits))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PAIR_BN158_nbits &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_pmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_dec
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
</UL>

<P><STRONG><a name="[1c1]"></a>PRBC_PK_sig_combine_share</STRONG> (Thumb, 342 bytes, Stack size 2352 bytes, thres_sig.o(i.PRBC_PK_sig_combine_share))
<BR><BR>[Stack]<UL><LI>Max Depth = 4424<LI>Call Chain = PRBC_PK_sig_combine_share &rArr; PAIR_BN158_G1mul &rArr; ECP_BN158_mul2 &rArr; ECP_BN158_sub &rArr; ECP_BN158_add &rArr; FP_BN158_imul &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_fromOctet
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_toOctet
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_add
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lagrange
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[1c2]"></a>PRBC_PK_verify_sig</STRONG> (Thumb, 194 bytes, Stack size 1120 bytes, thres_sig.o(i.PRBC_PK_verify_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 6760<LI>Call Chain = PRBC_PK_verify_sig &rArr; PAIR_BN158_double_ate &rArr; PAIR_BN158_ate &rArr; FP12_BN158_ssmul &rArr; FP12_BN158_smul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_fromOctet
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_isunity
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_neg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_copy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fromBytes
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[1c0]"></a>PRBC_PK_verify_sig_share</STRONG> (Thumb, 218 bytes, Stack size 1288 bytes, thres_sig.o(i.PRBC_PK_verify_sig_share))
<BR><BR>[Stack]<UL><LI>Max Depth = 6928<LI>Call Chain = PRBC_PK_verify_sig_share &rArr; PAIR_BN158_double_ate &rArr; PAIR_BN158_ate &rArr; FP12_BN158_ssmul &rArr; FP12_BN158_smul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_fromOctet
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_fexp
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_isunity
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_neg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_copy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fromBytes
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[1cf]"></a>PRBC_SIG_handler</STRONG> (Thumb, 392 bytes, Stack size 432 bytes, main.o(i.PRBC_SIG_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252<LI>Call Chain = PRBC_SIG_handler &rArr; sign_data &rArr; uECC_sign &rArr; uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*) &rArr; EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*) &rArr; XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_data
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventgroup_task
</UL>

<P><STRONG><a name="[1bf]"></a>PRBC_SK_sign</STRONG> (Thumb, 236 bytes, Stack size 672 bytes, thres_sig.o(i.PRBC_SK_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 2744<LI>Call Chain = PRBC_SK_sign &rArr; PAIR_BN158_G1mul &rArr; ECP_BN158_mul2 &rArr; ECP_BN158_sub &rArr; ECP_BN158_add &rArr; FP_BN158_imul &rArr; FP_BN158_nres &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_toOctet
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fromBytes
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[25b]"></a>PostSleepProcessing</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, utility.o(i.PostSleepProcessing))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PostSleepProcessing
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[25a]"></a>PreSleepProcessing</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, utility.o(i.PreSleepProcessing))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[1d1]"></a>RBC_ER_handler</STRONG> (Thumb, 390 bytes, Stack size 416 bytes, main.o(i.RBC_ER_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1236<LI>Call Chain = RBC_ER_handler &rArr; sign_data &rArr; uECC_sign &rArr; uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*) &rArr; EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*) &rArr; XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_data
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventgroup_task
</UL>

<P><STRONG><a name="[1d2]"></a>RBC_INIT_handler</STRONG> (Thumb, 292 bytes, Stack size 424 bytes, main.o(i.RBC_INIT_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1244<LI>Call Chain = RBC_INIT_handler &rArr; sign_data &rArr; uECC_sign &rArr; uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*) &rArr; EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*) &rArr; XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_data
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventgroup_task
</UL>

<P><STRONG><a name="[1d4]"></a>RBC_init</STRONG> (Thumb, 370 bytes, Stack size 320 bytes, main.o(i.RBC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = RBC_init &rArr; HASH256_hash &rArr; HASH256_process &rArr; HASH256_transform
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYDMA_Config_Rece
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1d5]"></a>RNG_Get_RandomNum</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rng.o(i.RNG_Get_RandomNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RNG_Get_RandomNum &rArr; HAL_RNG_GetRandomNumber &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GetRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_RNG
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_init
</UL>

<P><STRONG><a name="[1d3]"></a>RNG_Get_RandomRange</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rng.o(i.RNG_Get_RandomRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RNG_Get_RandomRange &rArr; HAL_RNG_GetRandomNumber &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_GetRandomNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventgroup_task
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_INIT_handler
</UL>

<P><STRONG><a name="[1d6]"></a>RNG_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rng.o(i.RNG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RNG_Init &rArr; HAL_RNG_Init &rArr; HAL_RNG_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RNG_Init
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_public_key
</UL>

<P><STRONG><a name="[219]"></a>Sixteen2Ten</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, utility.o(i.Sixteen2Ten))
<BR><BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_public_key
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1d9]"></a>SystemClock_Config</STRONG> (Thumb, 112 bytes, Stack size 80 bytes, utility.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7a]"></a>SystemInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, system_stm32f7xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(.text)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, btim.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, btim.o(i.TIM1_UP_TIM10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM1_UP_TIM10_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, btim.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM2_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, btim.o(i.TIM5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM5_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, btim.o(i.TIM7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TIM7_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[186]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, stm32f7xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[19d]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 248 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19e]"></a>UART_CheckIdleState</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19c]"></a>UART_SetConfig</STRONG> (Thumb, 782 bytes, Stack size 32 bytes, stm32f7xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[19f]"></a>UART_Start_Receive_DMA</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = UART_Start_Receive_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_DMA
</UL>

<P><STRONG><a name="[1a1]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 234 bytes, Stack size 12 bytes, stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[1a3]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, usart3.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_timx_enable
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_timx_counterset
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f7xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f767xx.o(RESET)
</UL>
<P><STRONG><a name="[1ab]"></a>User_GpioInit</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, mw1268_app.o(i.User_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = User_GpioInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
</UL>

<P><STRONG><a name="[205]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[280]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[236]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
</UL>

<P><STRONG><a name="[281]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[282]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[207]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[283]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1ae]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_data
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SK_sign
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig_share
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_verify_sig
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Set
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventgroup_task
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[284]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[285]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[208]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[286]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[287]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[288]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[257]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_sendData
</UL>

<P><STRONG><a name="[289]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[28a]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[28b]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[20e]"></a>btim_tim2_int_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, btim.o(i.btim_tim2_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = btim_tim2_int_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[253]"></a>btim_tim5_enable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, btim.o(i.btim_tim5_enable))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[210]"></a>btim_tim5_int_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, btim.o(i.btim_tim5_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = btim_tim5_int_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1de]"></a>btim_timx_counterset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, btim.o(i.btim_timx_counterset))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[190]"></a>btim_timx_enable</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, btim.o(i.btim_timx_enable))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[211]"></a>btim_timx_int_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, btim.o(i.btim_timx_int_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = btim_timx_int_init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[212]"></a>delay_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1af]"></a>delay_ms</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_public_key
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Set
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventgroup_task
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_INIT_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send_cmd
</UL>

<P><STRONG><a name="[1d7]"></a>delay_us</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>

<P><STRONG><a name="[259]"></a>eTaskConfirmSleepModeStatus</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.eTaskConfirmSleepModeStatus))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[88]"></a>eventgroup_task</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, main.o(i.eventgroup_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 7688<LI>Call Chain = eventgroup_task &rArr; PACKET_handler &rArr; PRBC_PK_verify_sig_share &rArr; PAIR_BN158_double_ate &rArr; PAIR_BN158_ate &rArr; FP12_BN158_ssmul &rArr; FP12_BN158_smul &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomRange
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_INIT_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_ER_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SIG_handler
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[87]"></a>eventsetbit_task</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, main.o(i.eventsetbit_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = eventsetbit_task &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.start_task)
</UL>
<P><STRONG><a name="[82]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[217]"></a>init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(i.init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = init &rArr; LoRa_Set &rArr; usart3_bpsset &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Set
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[218]"></a>init_public_key</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, utility.o(i.init_public_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = init_public_key &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_set_rng
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Init
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sixteen2Ten
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[21b]"></a>init_thres_enc</STRONG> (Thumb, 702 bytes, Stack size 1704 bytes, thres_enc.o(i.init_thres_enc))
<BR><BR>[Stack]<UL><LI>Max Depth = 5856<LI>Call Chain = init_thres_enc &rArr; PAIR_BN158_G2mul &rArr; ECP2_BN158_mul4 &rArr; ECP2_BN158_sub &rArr; ECP2_BN158_add &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sixteen2Ten
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_generator
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_generator
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_fromOctet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_copy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fromBytes
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[21d]"></a>init_thres_sig</STRONG> (Thumb, 612 bytes, Stack size 2512 bytes, thres_sig.o(i.init_thres_sig))
<BR><BR>[Stack]<UL><LI>Max Depth = 6664<LI>Call Chain = init_thres_sig &rArr; PAIR_BN158_G2mul &rArr; ECP2_BN158_mul4 &rArr; ECP2_BN158_sub &rArr; ECP2_BN158_add &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sixteen2Ten
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_generator
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_generator
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_fromOctet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_copy
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_fromBytes
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[1ce]"></a>lagrange</STRONG> (Thumb, 276 bytes, Stack size 280 bytes, thres_sig.o(i.lagrange))
<BR><BR>[Stack]<UL><LI>Max Depth = 708<LI>Call Chain = lagrange &rArr; BIG_160_28_moddiv &rArr; BIG_160_28_invmodp &rArr; BIG_160_28_mod &rArr; BIG_160_28_ctmod &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_zero
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_one
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_norm
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modneg
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_moddiv
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modadd
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_inc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_PK_sig_combine_share
</UL>

<P><STRONG><a name="[21e]"></a>lora_check_cmd</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, mw1268_uart.o(i.lora_check_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lora_check_cmd &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send_cmd
</UL>

<P><STRONG><a name="[1ad]"></a>lora_send_cmd</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mw1268_uart.o(i.lora_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lora_send_cmd &rArr; delay_ms &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_sendData
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_check_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Set
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
</UL>

<P><STRONG><a name="[79]"></a>main</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = main &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Config
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[24e]"></a>pvPortMalloc</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[269]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[23c]"></a>pxPortInitialiseStack</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1d0]"></a>sign_data</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, thres_sig.o(i.sign_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 820<LI>Call Chain = sign_data &rArr; uECC_sign &rArr; uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*) &rArr; EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*) &rArr; XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_secp160r1
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_INIT_handler
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_ER_handler
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRBC_SIG_handler
</UL>

<P><STRONG><a name="[85]"></a>start_task</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, main.o(i.start_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 6680<LI>Call Chain = start_task &rArr; init_thres_sig &rArr; PAIR_BN158_G2mul &rArr; ECP2_BN158_mul4 &rArr; ECP2_BN158_sub &rArr; ECP2_BN158_add &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_sig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_thres_enc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_public_key
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_tim5_int_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_tim5_enable
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_tim2_int_init
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RBC_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1bc]"></a>uECC_secp160r1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uecc.o(i.uECC_secp160r1))
<BR><BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_data
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[21a]"></a>uECC_set_rng</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uecc.o(i.uECC_set_rng))
<BR><BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_public_key
</UL>

<P><STRONG><a name="[251]"></a>uECC_sign</STRONG> (Thumb, 90 bytes, Stack size 72 bytes, uecc.o(i.uECC_sign))
<BR><BR>[Stack]<UL><LI>Max Depth = 796<LI>Call Chain = uECC_sign &rArr; uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*) &rArr; EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*) &rArr; XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int(unsigned*, const unsigned*, signed char)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sign_data
</UL>

<P><STRONG><a name="[1bd]"></a>uECC_verify</STRONG> (Thumb, 720 bytes, Stack size 528 bytes, uecc.o(i.uECC_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = uECC_verify &rArr; uECC_vli_modMult(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char) &rArr; uECC_vli_mmod(unsigned*, unsigned*, const unsigned*, signed char) &rArr; uECC_vli_numBits(const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int(unsigned*, const unsigned char*, unsigned, const uECC_Curve_t*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z(unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smax(short, short)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative(unsigned*, const unsigned char*, int)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe(const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit(const unsigned*, short)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits(const unsigned*, signed char)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero(const unsigned*, signed char)
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_equal(const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear(unsigned*, signed char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[1b1]"></a>usart3_bpsset</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, usart3.o(i.usart3_bpsset))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = usart3_bpsset &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Set
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
</UL>

<P><STRONG><a name="[1ac]"></a>usart3_init</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, usart3.o(i.usart3_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = usart3_init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_gpioinit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_timx_int_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;btim_timx_enable
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_Init
</UL>

<P><STRONG><a name="[12d]"></a>usart3_rx</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, usart3.o(i.usart3_rx))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[1b3]"></a>usart3_sendData</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, usart3.o(i.usart3_sendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = usart3_sendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_SendData
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_send_cmd
</UL>

<P><STRONG><a name="[223]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[229]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[23b]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[225]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[224]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[12e]"></a>vPortEnterCritical</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortEnterCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[12f]"></a>vPortExitCritical</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[234]"></a>vPortFree</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[266]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[237]"></a>vPortSuppressTicksAndSleep</STRONG> (Thumb, 404 bytes, Stack size 32 bytes, port.o(i.vPortSuppressTicksAndSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vPortSuppressTicksAndSleep &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PreSleepProcessing
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostSleepProcessing
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStepTick
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskConfirmSleepModeStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[25d]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, port.o(i.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortGetIPSR
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotifyFromISR
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>

<P><STRONG><a name="[22b]"></a>vQueueAddToRegistry</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, queue.o(i.vQueueAddToRegistry))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[248]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[215]"></a>vTaskDelay</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventsetbit_task
</UL>

<P><STRONG><a name="[252]"></a>vTaskDelete</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
</UL>

<P><STRONG><a name="[24d]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[261]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[25f]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[262]"></a>vTaskPriorityInherit</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[263]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSetTimeOutState &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[221]"></a>vTaskStartScheduler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[25c]"></a>vTaskStepTick</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tasks.o(i.vTaskStepTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskStepTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
</UL>

<P><STRONG><a name="[22d]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[98]"></a>vTaskSwitchContext</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[265]"></a>xPortStartScheduler</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xPortStartScheduler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_tmp_1__prvEnableVFP
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_tmp_1__prvStartFirstTask
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[22a]"></a>xQueueGenericCreate</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[246]"></a>xQueueGenericReceive</STRONG> (Thumb, 416 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericReceive &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[239]"></a>xQueueGenericReset</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[26b]"></a>xQueueGenericSend</STRONG> (Thumb, 412 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[26c]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[26a]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[220]"></a>xTaskCreate</STRONG> (Thumb, 96 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_task
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[1be]"></a>xTaskGenericNotify</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, tasks.o(i.xTaskGenericNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskGenericNotify &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PACKET_handler
</UL>

<P><STRONG><a name="[d6]"></a>xTaskGenericNotifyFromISR</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, tasks.o(i.xTaskGenericNotifyFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskGenericNotifyFromISR &rArr; vPortValidateInterruptPriority &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream1_IRQHandler
</UL>

<P><STRONG><a name="[214]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[249]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[1d8]"></a>xTaskIncrementTick</STRONG> (Thumb, 272 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[216]"></a>xTaskNotifyWait</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, tasks.o(i.xTaskNotifyWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xTaskNotifyWait &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eventgroup_task
</UL>

<P><STRONG><a name="[233]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[241]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[22e]"></a>xTaskResumeAll</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[264]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[243]"></a>xTimerGenericCommand</STRONG> (Thumb, 118 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[84]"></a>my_RNG</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, utility.o(i.my_RNG))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = my_RNG &rArr; RNG_Get_RandomNum &rArr; HAL_RNG_GetRandomNumber &rArr; HAL_RNG_GenerateRandomNumber
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RNG_Get_RandomNum
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utility.o(i.init_public_key)
</UL>
<P><STRONG><a name="[256]"></a>usart3_gpioinit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, usart3.o(i.usart3_gpioinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usart3_gpioinit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart3_init
</UL>

<P><STRONG><a name="[230]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[232]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>

<P><STRONG><a name="[238]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[23e]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[23f]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[240]"></a>prvNotifyQueueSetContainer</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, queue.o(i.prvNotifyQueueSetContainer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[24c]"></a>prvUnlockQueue</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvNotifyQueueSetContainer
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[222]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskNotifyWait
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[226]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[22c]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[22f]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[235]"></a>prvGetExpectedIdleTime</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tasks.o(i.prvGetExpectedIdleTime))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[89]"></a>prvIdleTask</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetExpectedIdleTime
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSuppressTicksAndSleep
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[23a]"></a>prvInitialiseNewTask</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvInitialiseNewTask &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[227]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[260]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericNotify
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[228]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[24b]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[23d]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[242]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[244]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[247]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[245]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[24a]"></a>prvSwitchTimerLists</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[8a]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; prvUnlockQueue &rArr; prvNotifyQueueSetContainer &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[24f]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[250]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[86]"></a>prvTaskExitError</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTaskExitError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1df]"></a>regularize_k(const unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, uecc.o(i._Z12regularize_kPKjPjS1_PK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = regularize_k(const unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit(const unsigned*, short)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1e0]"></a>uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, uecc.o(i._Z12uECC_vli_addPjPKjS1_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1(unsigned*, unsigned*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1(unsigned*, unsigned*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1(unsigned*, unsigned*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1(unsigned*, unsigned*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1(unsigned*, unsigned*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp256k1(unsigned*, const unsigned*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1(unsigned*, const unsigned*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update(unsigned*, const unsigned*, signed char)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default(unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k(const unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1e2]"></a>uECC_vli_cmp(const unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 66 bytes, Stack size 56 bytes, uecc.o(i._Z12uECC_vli_cmpPKjS0_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = uECC_vli_cmp(const unsigned*, const unsigned*, signed char) &rArr; uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero(const unsigned*, signed char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int(unsigned*, const unsigned*, signed char)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1e6]"></a>uECC_vli_set(unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uecc.o(i._Z12uECC_vli_setPjPKja))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uECC_vli_set(unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1(unsigned*, unsigned*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1(unsigned*, unsigned*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1(unsigned*, unsigned*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rss(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, short)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1(unsigned*, const unsigned*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double(unsigned*, unsigned*, unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1(unsigned*, const uECC_Curve_t*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default(unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod(unsigned*, unsigned*, const unsigned*, signed char)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1e3]"></a>uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, uecc.o(i._Z12uECC_vli_subPjPKjS1_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int(unsigned*, const unsigned char*, unsigned, const uECC_Curve_t*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1(unsigned*, unsigned*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1(unsigned*, unsigned*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1(unsigned*, unsigned*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1(unsigned*, unsigned*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1(unsigned*, unsigned*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp(const unsigned*, const unsigned*, signed char)
</UL>

<P><STRONG><a name="[1e5]"></a>EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*)</STRONG> (Thumb, 430 bytes, Stack size 208 bytes, uecc.o(i._Z13EccPoint_multPjPKjS1_S1_sPK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*) &rArr; XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z(unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double(unsigned*, unsigned*, unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit(const unsigned*, short)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1ee]"></a>uECC_vli_mmod(unsigned*, unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 322 bytes, Stack size 200 bytes, uecc.o(i._Z13uECC_vli_mmodPjS_PKja))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = uECC_vli_mmod(unsigned*, unsigned*, const unsigned*, signed char) &rArr; uECC_vli_numBits(const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1(unsigned*, signed char)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits(const unsigned*, signed char)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear(unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
</UL>

<P><STRONG><a name="[1f2]"></a>uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, uecc.o(i._Z13uECC_vli_multPjPKjS1_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
</UL>

<P><STRONG><a name="[1fe]"></a>vli_numDigits(const unsigned*, signed char)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, uecc.o(i._Z13vli_numDigitsPKja))
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits(const unsigned*, signed char)
</UL>

<P><STRONG><a name="[1f0]"></a>uECC_vli_clear(unsigned*, signed char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, uecc.o(i._Z14uECC_vli_clearPja))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int(unsigned*, const unsigned char*, unsigned, const uECC_Curve_t*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1(unsigned*, unsigned*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1(unsigned*, unsigned*)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative(unsigned*, const unsigned char*, int)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double(unsigned*, unsigned*, unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod(unsigned*, unsigned*, const unsigned*, signed char)
</UL>

<P><STRONG><a name="[255]"></a>uECC_vli_equal(const unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, uecc.o(i._Z14uECC_vli_equalPKjS0_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uECC_vli_equal(const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
</UL>

<P><STRONG><a name="[8d]"></a>x_side_default(unsigned*, const unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 84 bytes, Stack size 56 bytes, uecc.o(i._Z14x_side_defaultPjPKjPK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = x_side_default(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>uECC_vli_isZero(const unsigned*, signed char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, uecc.o(i._Z15uECC_vli_isZeroPKja))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uECC_vli_isZero(const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int(unsigned*, const unsigned*, signed char)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1(unsigned*, const uECC_Curve_t*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp(const unsigned*, const unsigned*, signed char)
</UL>

<P><STRONG><a name="[1f5]"></a>uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, uecc.o(i._Z15uECC_vli_modAddPjPKjS1_S1_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char) &rArr; uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe(const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_secp256k1(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default(unsigned*, const unsigned*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1ec]"></a>uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 306 bytes, Stack size 152 bytes, uecc.o(i._Z15uECC_vli_modInvPjPKjS1_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; vli_modInv_update(unsigned*, const unsigned*, signed char) &rArr; uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe(const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update(unsigned*, const unsigned*, signed char)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1(unsigned*, signed char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero(const unsigned*, signed char)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear(unsigned*, signed char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1(unsigned*, const uECC_Curve_t*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1ea]"></a>uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, uecc.o(i._Z15uECC_vli_modSubPjPKjS1_S1_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char) &rArr; uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[8c]"></a>mod_sqrt_default(unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 122 bytes, Stack size 88 bytes, uecc.o(i._Z16mod_sqrt_defaultPjPK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = mod_sqrt_default(unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit(const unsigned*, short)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits(const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)</STRONG> (Thumb, 390 bytes, Stack size 200 bytes, uecc.o(i._Z16uECC_sign_with_kPKhS0_jPjPhPK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 724<LI>Call Chain = uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*) &rArr; EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*) &rArr; XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int(unsigned*, const unsigned char*, unsigned, const uECC_Curve_t*)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int(unsigned*, const unsigned*, signed char)
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_nativeToBytes(unsigned char*, int, const unsigned*)
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative(unsigned*, const unsigned char*, int)
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits(const unsigned*, signed char)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero(const unsigned*, signed char)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear(unsigned*, signed char)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp(const unsigned*, const unsigned*, signed char)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k(const unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign
</UL>

<P><STRONG><a name="[1fa]"></a>uECC_vli_modMult(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 48 bytes, Stack size 88 bytes, uecc.o(i._Z16uECC_vli_modMultPjPKjS1_S1_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = uECC_vli_modMult(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char) &rArr; uECC_vli_mmod(unsigned*, unsigned*, const unsigned*, signed char) &rArr; uECC_vli_numBits(const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod(unsigned*, unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1ef]"></a>uECC_vli_numBits(const unsigned*, signed char)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, uecc.o(i._Z16uECC_vli_numBitsPKja))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uECC_vli_numBits(const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_numDigits(const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_generate_random_int(unsigned*, const unsigned*, signed char)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default(unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod(unsigned*, unsigned*, const unsigned*, signed char)
</UL>

<P><STRONG><a name="[1f1]"></a>uECC_vli_rshift1(unsigned*, signed char)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, uecc.o(i._Z16uECC_vli_rshift1Pja))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uECC_vli_rshift1(unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1(unsigned*, const unsigned*)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_modInv_update(unsigned*, const unsigned*, signed char)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mmod(unsigned*, unsigned*, const unsigned*, signed char)
</UL>

<P><STRONG><a name="[1e1]"></a>uECC_vli_testBit(const unsigned*, short)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uecc.o(i._Z16uECC_vli_testBitPKjs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uECC_vli_testBit(const unsigned*, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default(unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;regularize_k(const unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[94]"></a>x_side_secp256k1(unsigned*, const unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, uecc.o(i._Z16x_side_secp256k1PjPKjPK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = x_side_secp256k1(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>vli_modInv_update(unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, uecc.o(i._Z17vli_modInv_updatePjPKja))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = vli_modInv_update(unsigned*, const unsigned*, signed char) &rArr; uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1(unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>

<P><STRONG><a name="[90]"></a>mod_sqrt_secp224r1(unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 148 bytes, Stack size 192 bytes, uecc.o(i._Z18mod_sqrt_secp224r1PjPK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 628<LI>Call Chain = mod_sqrt_secp224r1(unsigned*, const uECC_Curve_t*) &rArr; mod_sqrt_secp224r1_rp(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*) &rArr; mod_sqrt_secp224r1_rss(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, short) &rArr; mod_sqrt_secp224r1_rs(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero(const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>XYcZ_initial_double(unsigned*, unsigned*, unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 116 bytes, Stack size 64 bytes, uecc.o(i._Z19XYcZ_initial_doublePjS_S_S_PKjPK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = XYcZ_initial_double(unsigned*, unsigned*, unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; apply_z(unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z(unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear(unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1f6]"></a>uECC_vli_cmp_unsafe(const unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, uecc.o(i._Z19uECC_vli_cmp_unsafePKjS0_a))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uECC_vli_cmp_unsafe(const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int(unsigned*, const unsigned char*, unsigned, const uECC_Curve_t*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256r1(unsigned*, unsigned*)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1(unsigned*, unsigned*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp224r1(unsigned*, unsigned*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp192r1(unsigned*, unsigned*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1(unsigned*, unsigned*)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modInv(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
</UL>

<P><STRONG><a name="[201]"></a>omega_mult_secp160r1(unsigned*, const unsigned*)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, uecc.o(i._Z20omega_mult_secp160r1PjPKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = omega_mult_secp160r1(unsigned*, const unsigned*) &rArr; uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1(unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp160r1(unsigned*, unsigned*)
</UL>

<P><STRONG><a name="[202]"></a>omega_mult_secp256k1(unsigned*, const unsigned*)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, uecc.o(i._Z20omega_mult_secp256k1PjPKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = omega_mult_secp256k1(unsigned*, const unsigned*) &rArr; uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vli_mmod_fast_secp256k1(unsigned*, unsigned*)
</UL>

<P><STRONG><a name="[203]"></a>mod_sqrt_secp224r1_rm(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*)</STRONG> (Thumb, 192 bytes, Stack size 96 bytes, uecc.o(i._Z21mod_sqrt_secp224r1_rmPjS_S_PKjS1_S1_S1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = mod_sqrt_secp224r1_rm(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*)
</UL>

<P><STRONG><a name="[1ff]"></a>mod_sqrt_secp224r1_rp(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*)</STRONG> (Thumb, 172 bytes, Stack size 136 bytes, uecc.o(i._Z21mod_sqrt_secp224r1_rpPjS_S_PKjS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = mod_sqrt_secp224r1_rp(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*) &rArr; mod_sqrt_secp224r1_rss(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, short) &rArr; mod_sqrt_secp224r1_rs(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rss(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, short)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1(unsigned*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[200]"></a>mod_sqrt_secp224r1_rs(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*)</STRONG> (Thumb, 130 bytes, Stack size 64 bytes, uecc.o(i._Z21mod_sqrt_secp224r1_rsPjS_S_PKjS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = mod_sqrt_secp224r1_rs(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rss(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, short)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1(unsigned*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1eb]"></a>uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 40 bytes, Stack size 88 bytes, uecc.o(i._Z21uECC_vli_modMult_fastPjPKjS1_PK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z(unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1(unsigned*, const uECC_Curve_t*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_secp256k1(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default(unsigned*, const uECC_Curve_t*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[204]"></a>mod_sqrt_secp224r1_rss(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, short)</STRONG> (Thumb, 88 bytes, Stack size 48 bytes, uecc.o(i._Z22mod_sqrt_secp224r1_rssPjS_S_PKjS1_S1_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = mod_sqrt_secp224r1_rss(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, short) &rArr; mod_sqrt_secp224r1_rs(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rp(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*)
</UL>

<P><STRONG><a name="[1fc]"></a>uECC_vli_bytesToNative(unsigned*, const unsigned char*, int)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, uecc.o(i._Z22uECC_vli_bytesToNativePjPKhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uECC_vli_bytesToNative(unsigned*, const unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear(unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits2int(unsigned*, const unsigned char*, unsigned, const uECC_Curve_t*)
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1fb]"></a>uECC_vli_nativeToBytes(unsigned char*, int, const unsigned*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uecc.o(i._Z22uECC_vli_nativeToBytesPhiPKj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = uECC_vli_nativeToBytes(unsigned char*, int, const unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[8b]"></a>double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 340 bytes, Stack size 96 bytes, uecc.o(i._Z23double_jacobian_defaultPjS_S_PK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit(const unsigned*, short)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1(unsigned*, signed char)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero(const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uecc.o(i._Z23uECC_vli_modSquare_fastPjPKjPK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_add(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_z(unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_secp256k1(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;double_jacobian_default(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rs(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_secp224r1_rm(unsigned*, unsigned*, unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*, const unsigned*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_secp256k1(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mod_sqrt_default(unsigned*, const uECC_Curve_t*)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;x_side_default(unsigned*, const unsigned*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[8e]"></a>vli_mmod_fast_secp160r1(unsigned*, unsigned*)</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, uecc.o(i._Z23vli_mmod_fast_secp160r1PjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = vli_mmod_fast_secp160r1(unsigned*, unsigned*) &rArr; omega_mult_secp160r1(unsigned*, const unsigned*) &rArr; uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp160r1(unsigned*, const unsigned*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe(const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear(unsigned*, signed char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>vli_mmod_fast_secp192r1(unsigned*, unsigned*)</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, uecc.o(i._Z23vli_mmod_fast_secp192r1PjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = vli_mmod_fast_secp192r1(unsigned*, unsigned*) &rArr; uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe(const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>vli_mmod_fast_secp224r1(unsigned*, unsigned*)</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, uecc.o(i._Z23vli_mmod_fast_secp224r1PjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vli_mmod_fast_secp224r1(unsigned*, unsigned*) &rArr; uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe(const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>vli_mmod_fast_secp256k1(unsigned*, unsigned*)</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, uecc.o(i._Z23vli_mmod_fast_secp256k1PjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = vli_mmod_fast_secp256k1(unsigned*, unsigned*) &rArr; omega_mult_secp256k1(unsigned*, const unsigned*) &rArr; uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;omega_mult_secp256k1(unsigned*, const unsigned*)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe(const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear(unsigned*, signed char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>vli_mmod_fast_secp256r1(unsigned*, unsigned*)</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, uecc.o(i._Z23vli_mmod_fast_secp256r1PjS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = vli_mmod_fast_secp256r1(unsigned*, unsigned*) &rArr; uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe(const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>uECC_generate_random_int(unsigned*, const unsigned*, signed char)</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, uecc.o(i._Z24uECC_generate_random_intPjPKja))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = uECC_generate_random_int(unsigned*, const unsigned*, signed char) &rArr; uECC_vli_cmp(const unsigned*, const unsigned*, signed char) &rArr; uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_numBits(const unsigned*, signed char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero(const unsigned*, signed char)
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp(const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[93]"></a>double_jacobian_secp256k1(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 256 bytes, Stack size 96 bytes, uecc.o(i._Z25double_jacobian_secp256k1PjS_S_PK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = double_jacobian_secp256k1(unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_testBit(const unsigned*, short)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_rshift1(unsigned*, signed char)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_isZero(const unsigned*, signed char)
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_add(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uecc.o(.constdata)
</UL>
<P><STRONG><a name="[254]"></a>smax(short, short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uecc.o(i._Z4smaxss))
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
</UL>

<P><STRONG><a name="[1f3]"></a>muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, uecc.o(i._Z6muladdjjPjS_S_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>

<P><STRONG><a name="[1ed]"></a>apply_z(unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, uecc.o(i._Z7apply_zPjS_PKjPK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = apply_z(unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XYcZ_initial_double(unsigned*, unsigned*, unsigned*, unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1e9]"></a>XYcZ_add(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 202 bytes, Stack size 64 bytes, uecc.o(i._Z8XYcZ_addPjS_S_S_PK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = XYcZ_add(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1fd]"></a>bits2int(unsigned*, const unsigned char*, unsigned, const uECC_Curve_t*)</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, uecc.o(i._Z8bits2intPjPKhjPK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = bits2int(unsigned*, const unsigned char*, unsigned, const uECC_Curve_t*) &rArr; uECC_vli_bytesToNative(unsigned*, const unsigned char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_bytesToNative(unsigned*, const unsigned char*, int)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_cmp_unsafe(const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_clear(unsigned*, signed char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_sub(unsigned*, const unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_verify
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_sign_with_k(const unsigned char*, const unsigned char*, unsigned, unsigned*, unsigned char*, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[1e8]"></a>XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*)</STRONG> (Thumb, 280 bytes, Stack size 128 bytes, uecc.o(i._Z9XYcZ_addCPjS_S_S_PK12uECC_Curve_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = XYcZ_addC(unsigned*, unsigned*, unsigned*, unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*) &rArr; uECC_vli_mult(unsigned*, const unsigned*, const unsigned*, signed char) &rArr; muladd(unsigned, unsigned, unsigned*, unsigned*, unsigned*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSquare_fast(unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modMult_fast(unsigned*, const unsigned*, const unsigned*, const uECC_Curve_t*)
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modSub(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_modAdd(unsigned*, const unsigned*, const unsigned*, const unsigned*, signed char)
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uECC_vli_set(unsigned*, const unsigned*, signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EccPoint_mult(unsigned*, const unsigned*, const unsigned*, const unsigned*, short, const uECC_Curve_t*)
</UL>

<P><STRONG><a name="[110]"></a>ECP_BN158_cmove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecp_bn158.o(i.ECP_BN158_cmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ECP_BN158_cmove &rArr; FP_BN158_cmove &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_cmove
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_select
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
</UL>

<P><STRONG><a name="[123]"></a>ECP_BN158_select</STRONG> (Thumb, 240 bytes, Stack size 112 bytes, ecp_bn158.o(i.ECP_BN158_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = ECP_BN158_select &rArr; ECP_BN158_neg &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teq
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_cmove
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_neg
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_mul2
</UL>

<P><STRONG><a name="[127]"></a>teq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ecp_bn158.o(i.teq))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP_BN158_select
</UL>

<P><STRONG><a name="[e5]"></a>ECP2_BN158_cmove</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ecp2_bn158.o(i.ECP2_BN158_cmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ECP2_BN158_cmove &rArr; FP2_BN158_cmove &rArr; FP_BN158_cmove &rArr; BIG_160_28_cmove
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_cmove
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_select
</UL>

<P><STRONG><a name="[f8]"></a>ECP2_BN158_select</STRONG> (Thumb, 240 bytes, Stack size 200 bytes, ecp2_bn158.o(i.ECP2_BN158_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = ECP2_BN158_select &rArr; ECP2_BN158_neg &rArr; FP2_BN158_neg &rArr; FP_BN158_neg &rArr; FP_BN158_reduce &rArr; BIG_160_28_pmul &rArr; muladd_160_28
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;teq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_cmove
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_neg
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_mul4
</UL>

<P><STRONG><a name="[fe]"></a>teq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ecp2_bn158.o(i.teq))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_select
</UL>

<P><STRONG><a name="[162]"></a>logb2</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, fp_bn158.o(i.logb2))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_neg
</UL>

<P><STRONG><a name="[166]"></a>quo</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, fp_bn158.o(i.quo))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = quo
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP_BN158_reduce
</UL>

<P><STRONG><a name="[1c7]"></a>PAIR_BN158_add</STRONG> (Thumb, 202 bytes, Stack size 80 bytes, pair_bn158.o(i.PAIR_BN158_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048<LI>Call Chain = PAIR_BN158_add &rArr; ECP2_BN158_add &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sub
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_line
</UL>

<P><STRONG><a name="[1cb]"></a>PAIR_BN158_double</STRONG> (Thumb, 182 bytes, Stack size 80 bytes, pair_bn158.o(i.PAIR_BN158_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 928<LI>Call Chain = PAIR_BN158_double &rArr; ECP2_BN158_dbl &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sub
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_sqr
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_norm
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_neg
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul_ip
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_mul
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_imul
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_copy
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_add
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECP2_BN158_dbl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_line
</UL>

<P><STRONG><a name="[1ca]"></a>PAIR_BN158_line</STRONG> (Thumb, 124 bytes, Stack size 536 bytes, pair_bn158.o(i.PAIR_BN158_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 1584<LI>Call Chain = PAIR_BN158_line &rArr; PAIR_BN158_add &rArr; ECP2_BN158_add &rArr; FP2_BN158_mul &rArr; FP_BN158_mod &rArr; BIG_160_28_monty
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP2_BN158_pmul
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_add
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP12_BN158_from_FP4s
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_zero
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_from_FP2s
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FP4_BN158_from_FP2H
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_ate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_double_ate
</UL>

<P><STRONG><a name="[1c4]"></a>glv</STRONG> (Thumb, 232 bytes, Stack size 168 bytes, pair_bn158.o(i.glv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = glv &rArr; BIG_160_28_modmul &rArr; BIG_160_28_ctdmod &rArr; BIG_160_28_dcmove
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_sub
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_zero
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G1mul
</UL>

<P><STRONG><a name="[1c6]"></a>gs</STRONG> (Thumb, 232 bytes, Stack size 216 bytes, pair_bn158.o(i.gs))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = gs &rArr; BIG_160_28_modmul &rArr; BIG_160_28_ctdmod &rArr; BIG_160_28_dcmove
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_sub
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_mul
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctmod
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_ctddiv
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_nbits
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_zero
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_rcopy
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_modmul
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_copy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_add
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAIR_BN158_G2mul
</UL>

<P><STRONG><a name="[d2]"></a>muladd_160_28</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, big_160_28.o(i.muladd_160_28))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = muladd_160_28
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIG_160_28_pmul
</UL>

<P><STRONG><a name="[1a6]"></a>HASH256_transform</STRONG> (Thumb, 498 bytes, Stack size 48 bytes, hash.o(i.HASH256_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HASH256_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_process
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HASH256_hash
</UL>

<P><STRONG><a name="[177]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f7xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[178]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f7xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[16c]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_DeInit
</UL>

<P><STRONG><a name="[16e]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, stm32f7xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[170]"></a>DMA_SetConfig</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f7xx_hal_dma.o(i.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[7c]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[7f]"></a>UART_DMAError</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_DMAError
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTxTransfer
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[7d]"></a>UART_DMAReceiveCplt</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_DMAReceiveCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAReceiveCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[7e]"></a>UART_DMARxHalfCplt</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMARxHalfCplt
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxHalfCpltCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_DMA)
</UL>
<P><STRONG><a name="[193]"></a>UART_EndRxTransfer</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[199]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f7xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[192]"></a>UART_EndTxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f7xx_hal_uart.o(i.UART_EndTxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DMAStop
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAError
</UL>

<P><STRONG><a name="[80]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, stm32f7xx_hal_uart.o(i.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_RxISR_16BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[81]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, stm32f7xx_hal_uart.o(i.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RxISR_8BIT
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f7xx_hal_uart.o(i.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[209]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[206]"></a>_printf_core</STRONG> (Thumb, 1704 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[20c]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[20b]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[83]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0sprintf)
<LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
